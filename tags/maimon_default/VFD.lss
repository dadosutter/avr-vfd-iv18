
VFD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000150e  000015e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000150e  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800120  00800120  00001602  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  00001602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00001608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 00000128  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000256  00000000  00000000  00001733  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e25  00000000  00000000  00001989  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000646  00000000  00000000  000027ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fc5  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00003dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000484  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003d5  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  000047a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	65 c0       	rjmp	.+202    	; 0xce <__bad_interrupt>
       4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
       6:	63 c0       	rjmp	.+198    	; 0xce <__bad_interrupt>
       8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
       a:	61 c0       	rjmp	.+194    	; 0xce <__bad_interrupt>
       c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
       e:	5f c0       	rjmp	.+190    	; 0xce <__bad_interrupt>
      10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
      12:	c6 c0       	rjmp	.+396    	; 0x1a0 <__vector_9>
      14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
      16:	5b c0       	rjmp	.+182    	; 0xce <__bad_interrupt>
      18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
      1a:	4b c6       	rjmp	.+3222   	; 0xcb2 <__vector_13>
      1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
      1e:	57 c0       	rjmp	.+174    	; 0xce <__bad_interrupt>
      20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
      22:	0e c7       	rjmp	.+3612   	; 0xe40 <__vector_17>
      24:	31 c1       	rjmp	.+610    	; 0x288 <__vector_18>
      26:	53 c0       	rjmp	.+166    	; 0xce <__bad_interrupt>
      28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
      2a:	68 c4       	rjmp	.+2256   	; 0x8fc <__vector_21>
      2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
      2e:	4f c0       	rjmp	.+158    	; 0xce <__bad_interrupt>
      30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
      32:	4d c0       	rjmp	.+154    	; 0xce <__bad_interrupt>
      34:	6b c1       	rjmp	.+726    	; 0x30c <State_Machine+0x46>
      36:	75 c1       	rjmp	.+746    	; 0x322 <State_Machine+0x5c>
      38:	83 c1       	rjmp	.+774    	; 0x340 <State_Machine+0x7a>
      3a:	99 c1       	rjmp	.+818    	; 0x36e <State_Machine+0xa8>
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <State_Machine+0xda>
      3e:	fc c1       	rjmp	.+1016   	; 0x438 <State_Machine+0x172>
      40:	fb c1       	rjmp	.+1014   	; 0x438 <State_Machine+0x172>
      42:	49 c2       	rjmp	.+1170   	; 0x4d6 <State_Machine+0x210>
      44:	4c c2       	rjmp	.+1176   	; 0x4de <State_Machine+0x218>
      46:	19 c3       	rjmp	.+1586   	; 0x67a <__stack+0x17b>
      48:	4a c3       	rjmp	.+1684   	; 0x6de <__stack+0x1df>
      4a:	8c c3       	rjmp	.+1816   	; 0x764 <__stack+0x265>
      4c:	22 c4       	rjmp	.+2116   	; 0x892 <__stack+0x393>
      4e:	ce c3       	rjmp	.+1948   	; 0x7ec <__stack+0x2ed>
      50:	f7 c3       	rjmp	.+2030   	; 0x840 <__stack+0x341>
      52:	42 c4       	rjmp	.+2180   	; 0x8d8 <__stack+0x3d9>
      54:	48 c4       	rjmp	.+2192   	; 0x8e6 <__stack+0x3e7>

00000056 <__c.1794>:
      56:	49 6e 69 63 69 6f 20 56 46 44 0d 00                 Inicio VFD..

00000062 <VFD_Segs>:
      62:	00 00 01 02 01 00 fc 60 da f2 66 b6 be e0 fe e6     .......`..f.....
      72:	00 00 00 00 00 00 00 ee 3e 9c 7a 9e 8e f6 6e 60     ........>.z...n`
      82:	78 ae 1c aa 2a fc ce e6 8c b6 1e 7c 54 56 92 76     x...*......|TV.v
      92:	da 00 00 00 00 10                                   ......

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d4 e0       	ldi	r29, 0x04	; 4
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee e0       	ldi	r30, 0x0E	; 14
      ac:	f5 e1       	ldi	r31, 0x15	; 21
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	a0 32       	cpi	r26, 0x20	; 32
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e2       	ldi	r26, 0x20	; 32
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 3a       	cpi	r26, 0xA3	; 163
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	02 d0       	rcall	.+4      	; 0xd0 <main>
      cc:	ea c6       	rjmp	.+3540   	; 0xea2 <exit>

000000ce <__bad_interrupt>:
      ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <main>:
}


static inline void HW_Init (void)
{
	PORTC = 0x7C;	// Pull-ups on everything except ADC0 and ADC1;
      d0:	8c e7       	ldi	r24, 0x7C	; 124
      d2:	88 b9       	out	0x08, r24	; 8
	DDRC = 0;		// Everything is input;
      d4:	17 b8       	out	0x07, r1	; 7

	// PD4 as output - used as a trigger source for oscilloscope
	// PD5 as output - used to switch a load while debugging
	// PD6 (OC0A) as output.
	// All inputs with pull-up
	PORTD = (1<<PD3)| (1<<PD7);
      d6:	88 e8       	ldi	r24, 0x88	; 136
      d8:	8b b9       	out	0x0b, r24	; 11
	DDRD = (1<<PD2) | (1<<PD4) | (1<<PD5) | (1<<PD6);
      da:	84 e7       	ldi	r24, 0x74	; 116
      dc:	8a b9       	out	0x0a, r24	; 10

	uart_init();
      de:	79 d0       	rcall	.+242    	; 0x1d2 <uart_init>
	vfd_init();
      e0:	23 d5       	rcall	.+2630   	; 0xb28 <vfd_init>

	// PS = 64 -> f = (18.432M/64) = 288 kHz -> ~20.6 ksps
	// Vref = Int 1.10V
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
      e2:	86 e8       	ldi	r24, 0x86	; 134
      e4:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = ((1<<REFS0) | (1<<REFS1)) + VIN_CH; 	// ADC1	-> leitura da tensão de entrada
      e8:	81 ec       	ldi	r24, 0xC1	; 193
      ea:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);					// Descarta a primeira leitura do ADC
      ee:	80 91 7a 00 	lds	r24, 0x007A
      f2:	80 64       	ori	r24, 0x40	; 64
      f4:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1<<ADSC));
      f8:	80 91 7a 00 	lds	r24, 0x007A
      fc:	86 fd       	sbrc	r24, 6
      fe:	fc cf       	rjmp	.-8      	; 0xf8 <main+0x28>

	// Configura Timer 2 -> timeout da serial
	// PS = 1024 -> interrupção a cada ~21.8 ms, sempre que o timer dá overflow
	// TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20); -> só ligar quando receber alguma coisa
	TIMSK2 = (1<<TOIE2);
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	90 93 70 00 	sts	0x0070, r25

	// Configura PWM
	// Também usa para gerar o refresh do max6921, com a interrupção de overflow
	TCCR0A = (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
     106:	83 e8       	ldi	r24, 0x83	; 131
     108:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00);
     10a:	95 bd       	out	0x25, r25	; 37
	HW_Init();

	// enquanto a tensão de entrada estiver abaixo de 8V e acima de 16V, não faz nada
	do
	{
		ADCSRA |= (1<<ADSC);
     10c:	80 91 7a 00 	lds	r24, 0x007A
     110:	80 64       	ori	r24, 0x40	; 64
     112:	80 93 7a 00 	sts	0x007A, r24
		while (ADCSRA & (1<<ADSC));
     116:	80 91 7a 00 	lds	r24, 0x007A
     11a:	86 fd       	sbrc	r24, 6
     11c:	fc cf       	rjmp	.-8      	; 0x116 <main+0x46>

	} while ((ADC < MIN_VI_COUNT) || (ADC > MAX_VI_COUNT));
     11e:	80 91 78 00 	lds	r24, 0x0078
     122:	90 91 79 00 	lds	r25, 0x0079
     126:	85 50       	subi	r24, 0x05	; 5
     128:	91 40       	sbci	r25, 0x01	; 1
     12a:	80 f3       	brcs	.-32     	; 0x10c <main+0x3c>
     12c:	80 91 78 00 	lds	r24, 0x0078
     130:	90 91 79 00 	lds	r25, 0x0079
     134:	8c 50       	subi	r24, 0x0C	; 12
     136:	92 40       	sbci	r25, 0x02	; 2
     138:	48 f7       	brcc	.-46     	; 0x10c <main+0x3c>

	VoltInp = ADC;
     13a:	80 91 78 00 	lds	r24, 0x0078
     13e:	90 91 79 00 	lds	r25, 0x0079
     142:	90 93 96 01 	sts	0x0196, r25
     146:	80 93 95 01 	sts	0x0195, r24

	ADMUX = ((1<<REFS0) | (1<<REFS1)) + VOUT_CH; 	// feedback do conversor boost
     14a:	80 ec       	ldi	r24, 0xC0	; 192
     14c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADIF) | (1<<ADIE);		// limpa o flag e habilita interrupção do ADC
     150:	80 91 7a 00 	lds	r24, 0x007A
     154:	88 61       	ori	r24, 0x18	; 24
     156:	80 93 7a 00 	sts	0x007A, r24

	tPIsat_params.w_kp_pu = eeprom_read_word(&ee_PI_kp);
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	92 d8       	rcall	.-3804   	; 0xfffff284 <__fuse+0xff7df284>
     160:	90 93 98 01 	sts	0x0198, r25
     164:	80 93 97 01 	sts	0x0197, r24
	tPIsat_params.w_ki_pu = eeprom_read_word(&ee_PI_ki);
     168:	84 e0       	ldi	r24, 0x04	; 4
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	8b d8       	rcall	.-3818   	; 0xfffff284 <__fuse+0xff7df284>
     16e:	90 93 9a 01 	sts	0x019A, r25
     172:	80 93 99 01 	sts	0x0199, r24
	tPIsat_params.sp = eeprom_read_word(&ee_PI_SP);
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	84 d8       	rcall	.-3832   	; 0xfffff284 <__fuse+0xff7df284>
     17c:	90 93 a0 01 	sts	0x01A0, r25
     180:	80 93 9f 01 	sts	0x019F, r24

	ADCSRA |= (1<<ADSC);		// Inicia primeira leitura do ADC
     184:	80 91 7a 00 	lds	r24, 0x007A
     188:	80 64       	ori	r24, 0x40	; 64
     18a:	80 93 7a 00 	sts	0x007A, r24
	sei();
     18e:	78 94       	sei


	uart_puts_P(PSTR("Inicio VFD\r"));
     190:	86 e5       	ldi	r24, 0x56	; 86
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	5f d0       	rcall	.+190    	; 0x254 <uart_puts_P>
	vfd_setstring("Conversor Boost");
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	37 d5       	rcall	.+2670   	; 0xc0a <vfd_setstring>

	for(;;)
	{
		State_Machine();
     19c:	94 d0       	rcall	.+296    	; 0x2c6 <State_Machine>
     19e:	fe cf       	rjmp	.-4      	; 0x19c <main+0xcc>

000001a0 <__vector_9>:
volatile uint8_t TOTicks;
volatile uint8_t TimeOut;

// Gera os timeouts para a porta serial
ISR(TIMER2_OVF_vect)
{
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	8f 93       	push	r24
	if (TOTicks++ == TO_TICKS)
     1ac:	80 91 6d 01 	lds	r24, 0x016D
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	80 93 6d 01 	sts	0x016D, r24
     1b6:	81 50       	subi	r24, 0x01	; 1
     1b8:	83 3e       	cpi	r24, 0xE3	; 227
     1ba:	29 f4       	brne	.+10     	; 0x1c6 <__vector_9+0x26>
	{
		TOTicks = 0;
     1bc:	10 92 6d 01 	sts	0x016D, r1
		TimeOut	= TRUE;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 6e 01 	sts	0x016E, r24
	}
}
     1c6:	8f 91       	pop	r24
     1c8:	0f 90       	pop	r0
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	0f 90       	pop	r0
     1ce:	1f 90       	pop	r1
     1d0:	18 95       	reti

000001d2 <uart_init>:
static volatile unsigned char UART_RxTail;

void uart_init(void)
{
	// Setup port
	PORTD |= (1<<RX);
     1d2:	58 9a       	sbi	0x0b, 0	; 11
	DDRD |= (1<<TX);
     1d4:	51 9a       	sbi	0x0a, 1	; 10

    UART_RxHead = 0;
     1d6:	10 92 40 01 	sts	0x0140, r1
    UART_RxTail = 0;
     1da:	10 92 41 01 	sts	0x0141, r1
    
    /*Set baud rate */
    UBRR0H = (uint8_t)(MY_UBRR >> 8);
     1de:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)(MY_UBRR);
     1e2:	89 e0       	ldi	r24, 0x09	; 9
     1e4:	80 93 c4 00 	sts	0x00C4, r24
    
    /*Enable receiver and transmitter plus corresponding interrupts*/
    UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     1e8:	88 e9       	ldi	r24, 0x98	; 152
     1ea:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	80 93 c2 00 	sts	0x00C2, r24
}
     1f4:	08 95       	ret

000001f6 <uart_getc>:
char uart_getc(void)
{
    unsigned char tmptail;

	// Wait for new data or timeout
    while ((TimeOut == FALSE) && (UART_RxHead == UART_RxTail));
     1f6:	80 91 6e 01 	lds	r24, 0x016E
     1fa:	88 23       	and	r24, r24
     1fc:	31 f4       	brne	.+12     	; 0x20a <uart_getc+0x14>
     1fe:	90 91 40 01 	lds	r25, 0x0140
     202:	80 91 41 01 	lds	r24, 0x0141
     206:	98 17       	cp	r25, r24
     208:	b1 f3       	breq	.-20     	; 0x1f6 <uart_getc>
	
	if (TimeOut == TRUE)
     20a:	80 91 6e 01 	lds	r24, 0x016E
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	11 f4       	brne	.+4      	; 0x216 <uart_getc+0x20>
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	08 95       	ret
	{
        return 0;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     216:	e0 91 41 01 	lds	r30, 0x0141
     21a:	ef 5f       	subi	r30, 0xFF	; 255
     21c:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
     21e:	e0 93 41 01 	sts	0x0141, r30

	// Just for debugging
//	uart_putc(UART_RxBuf[tmptail]);

    return UART_RxBuf[tmptail];
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	e0 5e       	subi	r30, 0xE0	; 224
     226:	fe 4f       	sbci	r31, 0xFE	; 254
     228:	80 81       	ld	r24, Z
}
     22a:	08 95       	ret

0000022c <uart_putc>:
Purpose:  transmit a byte via UART (wait for it to be avaiable if it isn't)
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     22c:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)));
     22e:	80 91 c0 00 	lds	r24, 0x00C0
     232:	85 ff       	sbrs	r24, 5
     234:	fc cf       	rjmp	.-8      	; 0x22e <uart_putc+0x2>
	UDR0 = data;
     236:	90 93 c6 00 	sts	0x00C6, r25
}
     23a:	08 95       	ret

0000023c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ec 01       	movw	r28, r24
     242:	02 c0       	rjmp	.+4      	; 0x248 <uart_puts+0xc>
	while (*s) 
		uart_putc(*s++);
     244:	21 96       	adiw	r28, 0x01	; 1
     246:	f2 df       	rcall	.-28     	; 0x22c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
	while (*s) 
     248:	88 81       	ld	r24, Y
     24a:	88 23       	and	r24, r24
     24c:	d9 f7       	brne	.-10     	; 0x244 <uart_puts+0x8>
		uart_putc(*s++);
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <uart_puts_P>:
Purpose:  transmit string from flash to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts_P(const char *s )
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	ec 01       	movw	r28, r24
     25a:	04 c0       	rjmp	.+8      	; 0x264 <uart_puts_P+0x10>
	while (pgm_read_byte(s) != 0x00)
		uart_putc(pgm_read_byte(s++));
     25c:	21 96       	adiw	r28, 0x01	; 1
     25e:	f9 01       	movw	r30, r18
     260:	84 91       	lpm	r24, Z+
     262:	e4 df       	rcall	.-56     	; 0x22c <uart_putc>
     264:	9e 01       	movw	r18, r28
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts_P(const char *s )
{
	while (pgm_read_byte(s) != 0x00)
     266:	fe 01       	movw	r30, r28
     268:	84 91       	lpm	r24, Z+
     26a:	88 23       	and	r24, r24
     26c:	b9 f7       	brne	.-18     	; 0x25c <uart_puts_P+0x8>
		uart_putc(pgm_read_byte(s++));

}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <uart_rx_buffer_empty>:
Input:    none
Returns:  0 if RX buffer has data, 1 if RX buffer is emtpy
**************************************************************************/
unsigned char uart_rx_buffer_empty(void)
{
    if ( UART_RxHead == UART_RxTail ) {
     274:	90 91 40 01 	lds	r25, 0x0140
     278:	80 91 41 01 	lds	r24, 0x0141
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	98 17       	cp	r25, r24
     280:	09 f4       	brne	.+2      	; 0x284 <uart_rx_buffer_empty+0x10>
     282:	21 e0       	ldi	r18, 0x01	; 1
        return 1;   /* no data available */
    }
	else {
		return 0;
	}
}/*uart_rx_buffer_empty*/
     284:	82 2f       	mov	r24, r18
     286:	08 95       	ret

00000288 <__vector_18>:


ISR(USART_RX_vect)
{
     288:	1f 92       	push	r1
     28a:	0f 92       	push	r0
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	8f 93       	push	r24
     294:	9f 93       	push	r25
     296:	ef 93       	push	r30
     298:	ff 93       	push	r31
	unsigned char tmphead;
	unsigned char byte;
 
	/* read UART status register and UART data register */ 
	byte = UDR0;
     29a:	90 91 c6 00 	lds	r25, 0x00C6
      
	/* calculate buffer index */ 
	tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     29e:	80 91 40 01 	lds	r24, 0x0140
     2a2:	8f 5f       	subi	r24, 0xFF	; 255
     2a4:	8f 71       	andi	r24, 0x1F	; 31
    
	/* store new index */
	UART_RxHead = tmphead;
     2a6:	80 93 40 01 	sts	0x0140, r24
	/* store received data in buffer */
	UART_RxBuf[tmphead] = byte;
     2aa:	e0 e2       	ldi	r30, 0x20	; 32
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	e8 0f       	add	r30, r24
     2b0:	f1 1d       	adc	r31, r1
     2b2:	90 83       	st	Z, r25
}
     2b4:	ff 91       	pop	r31
     2b6:	ef 91       	pop	r30
     2b8:	9f 91       	pop	r25
     2ba:	8f 91       	pop	r24
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <State_Machine>:
	uint8_t uart_tmp;

	// Início da máquina de estados para leitura da serial
		
	// Se deu timeout
	if (TimeOut)
     2c6:	80 91 6e 01 	lds	r24, 0x016E
     2ca:	88 23       	and	r24, r24
     2cc:	39 f0       	breq	.+14     	; 0x2dc <State_Machine+0x16>
	{
		CurState = SM_ERROR;
     2ce:	80 e1       	ldi	r24, 0x10	; 16
     2d0:	80 93 42 01 	sts	0x0142, r24
		TipoErro = CB_ERROR_TO;
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	80 93 92 01 	sts	0x0192, r24
     2da:	09 c0       	rjmp	.+18     	; 0x2ee <State_Machine+0x28>
		TOTicks = 0;
		TimeOut = FALSE;
	}

	// Se tiver algo no buffer, executa a máquina de estados.
	else if (CurState != SM_IDLE)
     2dc:	80 91 42 01 	lds	r24, 0x0142
     2e0:	88 23       	and	r24, r24
     2e2:	49 f0       	breq	.+18     	; 0x2f6 <State_Machine+0x30>
	{
		// Reseta os timers e contador de timeout para a serial
		TCNT2 = 0;					// Zera o timer 2
     2e4:	10 92 b2 00 	sts	0x00B2, r1
		GTCCR |= (1<<PSRASY);		// Zera o prescaler do timer2
     2e8:	83 b5       	in	r24, 0x23	; 35
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	83 bd       	out	0x23, r24	; 35
		TOTicks = 0;
     2ee:	10 92 6d 01 	sts	0x016D, r1
		TimeOut = FALSE;
     2f2:	10 92 6e 01 	sts	0x016E, r1
	}

	switch (CurState)
     2f6:	80 91 42 01 	lds	r24, 0x0142
     2fa:	e8 2f       	mov	r30, r24
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	e1 31       	cpi	r30, 0x11	; 17
     300:	f1 05       	cpc	r31, r1
     302:	08 f0       	brcs	.+2      	; 0x306 <State_Machine+0x40>
     304:	fa c2       	rjmp	.+1524   	; 0x8fa <__stack+0x3fb>
     306:	e6 5e       	subi	r30, 0xE6	; 230
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	09 94       	ijmp
	{
		case SM_IDLE:
			if (uart_rx_buffer_empty() == 0)		// Se tem alguma coisa no buffer
     30c:	b3 df       	rcall	.-154    	; 0x274 <uart_rx_buffer_empty>
     30e:	88 23       	and	r24, r24
     310:	09 f0       	breq	.+2      	; 0x314 <State_Machine+0x4e>
     312:	f3 c2       	rjmp	.+1510   	; 0x8fa <__stack+0x3fb>
			{
				CurState = SM_START;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 93 42 01 	sts	0x0142, r24
				TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	// Inicia Timer2 p/ Timeout
     31a:	87 e0       	ldi	r24, 0x07	; 7
     31c:	80 93 b1 00 	sts	0x00B1, r24
     320:	08 95       	ret
			break;

		// Confere se o primeiro byte é 'b', já que todos os comandos começam com ele
		case SM_START:
			
			switch (uart_getc())
     322:	69 df       	rcall	.-302    	; 0x1f6 <uart_getc>
     324:	82 36       	cpi	r24, 0x62	; 98
     326:	19 f0       	breq	.+6      	; 0x32e <State_Machine+0x68>
     328:	86 37       	cpi	r24, 0x76	; 118
     32a:	29 f4       	brne	.+10     	; 0x336 <State_Machine+0x70>
     32c:	02 c0       	rjmp	.+4      	; 0x332 <State_Machine+0x6c>
			{
				case CB_INICIO:
					CurState = SM_GET_CMD;
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	bf c2       	rjmp	.+1406   	; 0x8b0 <__stack+0x3b1>
					break;

				case VFD_INICIO:
					CurState = SM_VFD_CMD;
     332:	89 e0       	ldi	r24, 0x09	; 9
     334:	bd c2       	rjmp	.+1402   	; 0x8b0 <__stack+0x3b1>
					break;

				default:
					CurState = SM_ERROR;
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	80 93 42 01 	sts	0x0142, r24
					TipoErro = CB_ERROR_START;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	c9 c2       	rjmp	.+1426   	; 0x8d2 <__stack+0x3d3>
				
		// Segundo byte - byte de comando
		// Verifica se é leitura ou escrita
		case SM_GET_CMD:

			switch (uart_getc())
     340:	5a df       	rcall	.-332    	; 0x1f6 <uart_getc>
     342:	82 37       	cpi	r24, 0x72	; 114
     344:	19 f0       	breq	.+6      	; 0x34c <State_Machine+0x86>
     346:	87 37       	cpi	r24, 0x77	; 119
     348:	69 f4       	brne	.+26     	; 0x364 <State_Machine+0x9e>
     34a:	02 c0       	rjmp	.+4      	; 0x350 <State_Machine+0x8a>
			{
				case CB_CMD_RD:
					CurState = SM_READ;
     34c:	88 e0       	ldi	r24, 0x08	; 8
     34e:	b0 c2       	rjmp	.+1376   	; 0x8b0 <__stack+0x3b1>
					break;

			// Se for escrita, também inicializa as variáveis para
			// leitura dos novos valores
				case CB_CMD_WR:
					CurState = SM_WRITE;
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	80 93 42 01 	sts	0x0142, r24
					Counter = 0;
     356:	10 92 91 01 	sts	0x0191, r1
					tempu16 = 0;
     35a:	10 92 94 01 	sts	0x0194, r1
     35e:	10 92 93 01 	sts	0x0193, r1
     362:	08 95       	ret
					break;

				default:
					CurState = SM_ERROR;
     364:	80 e1       	ldi	r24, 0x10	; 16
     366:	80 93 42 01 	sts	0x0142, r24
					TipoErro = CB_ERROR_CMD;
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	b2 c2       	rjmp	.+1380   	; 0x8d2 <__stack+0x3d3>
			break;

		// Veririfica qual variável se quer escrever
		// Atualmente só pode mexer no set-point
		case SM_WRITE:
			switch (uart_getc())
     36e:	43 df       	rcall	.-378    	; 0x1f6 <uart_getc>
     370:	8c 36       	cpi	r24, 0x6C	; 108
     372:	79 f0       	breq	.+30     	; 0x392 <State_Machine+0xcc>
     374:	8d 36       	cpi	r24, 0x6D	; 109
     376:	18 f4       	brcc	.+6      	; 0x37e <State_Machine+0xb8>
     378:	89 36       	cpi	r24, 0x69	; 105
     37a:	69 f4       	brne	.+26     	; 0x396 <State_Machine+0xd0>
     37c:	08 c0       	rjmp	.+16     	; 0x38e <State_Machine+0xc8>
     37e:	80 37       	cpi	r24, 0x70	; 112
     380:	21 f0       	breq	.+8      	; 0x38a <State_Machine+0xc4>
     382:	83 37       	cpi	r24, 0x73	; 115
     384:	41 f4       	brne	.+16     	; 0x396 <State_Machine+0xd0>
			{
				case CB_WR_SP:
					CurState = SM_WR_SP;
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	93 c2       	rjmp	.+1318   	; 0x8b0 <__stack+0x3b1>
					break;

				case CB_WR_KP:
					CurState = SM_WR_KP;
     38a:	85 e0       	ldi	r24, 0x05	; 5
     38c:	91 c2       	rjmp	.+1314   	; 0x8b0 <__stack+0x3b1>
					break;

				case CB_WR_KI:
					CurState = SM_WR_KI;
     38e:	86 e0       	ldi	r24, 0x06	; 6
     390:	8f c2       	rjmp	.+1310   	; 0x8b0 <__stack+0x3b1>
					break;

				case CB_WR_LD:
					CurState = SM_WR_LD;
     392:	87 e0       	ldi	r24, 0x07	; 7
     394:	8d c2       	rjmp	.+1306   	; 0x8b0 <__stack+0x3b1>
					break;

				default:
					CurState = SM_ERROR;
     396:	80 e1       	ldi	r24, 0x10	; 16
     398:	80 93 42 01 	sts	0x0142, r24
					TipoErro = CB_ERROR_WR;
     39c:	84 e0       	ldi	r24, 0x04	; 4
     39e:	99 c2       	rjmp	.+1330   	; 0x8d2 <__stack+0x3d3>
			}
			break;

		// Lê os próximos 3 bytes que terão o valor do novo set point
		case SM_WR_SP:
			uart_tmp = uart_getc();
     3a0:	2a df       	rcall	.-428    	; 0x1f6 <uart_getc>
     3a2:	48 2f       	mov	r20, r24

			// só aceita se for número
			if ((uart_tmp >='0') && (uart_tmp <= '9'))
     3a4:	80 53       	subi	r24, 0x30	; 48
     3a6:	8a 30       	cpi	r24, 0x0A	; 10
     3a8:	08 f0       	brcs	.+2      	; 0x3ac <State_Machine+0xe6>
     3aa:	90 c0       	rjmp	.+288    	; 0x4cc <State_Machine+0x206>
			{
				tempu16 *= 10;
				tempu16 += uart_tmp - '0';		// converte para valor numérico
     3ac:	80 91 93 01 	lds	r24, 0x0193
     3b0:	90 91 94 01 	lds	r25, 0x0194
     3b4:	9c 01       	movw	r18, r24
     3b6:	b3 e0       	ldi	r27, 0x03	; 3
     3b8:	22 0f       	add	r18, r18
     3ba:	33 1f       	adc	r19, r19
     3bc:	ba 95       	dec	r27
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <State_Machine+0xf2>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	28 0f       	add	r18, r24
     3c6:	39 1f       	adc	r19, r25
     3c8:	20 53       	subi	r18, 0x30	; 48
     3ca:	30 40       	sbci	r19, 0x00	; 0
     3cc:	24 0f       	add	r18, r20
     3ce:	31 1d       	adc	r19, r1
     3d0:	30 93 94 01 	sts	0x0194, r19
     3d4:	20 93 93 01 	sts	0x0193, r18
				Counter++;
     3d8:	80 91 91 01 	lds	r24, 0x0191
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 91 01 	sts	0x0191, r24

				if (Counter > 2)				// Se já leu os 3 bytes
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <State_Machine+0x122>
     3e6:	89 c2       	rjmp	.+1298   	; 0x8fa <__stack+0x3fb>
				{
					// verifica se está dentro da faixa aceitável
					if ((tempu16 >= 80 ) && (tempu16 <= 240))
     3e8:	c9 01       	movw	r24, r18
     3ea:	80 55       	subi	r24, 0x50	; 80
     3ec:	90 40       	sbci	r25, 0x00	; 0
     3ee:	81 3a       	cpi	r24, 0xA1	; 161
     3f0:	91 05       	cpc	r25, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <State_Machine+0x130>
     3f4:	6b c0       	rjmp	.+214    	; 0x4cc <State_Machine+0x206>
					{
						// Converte e salva o valor do set-point novo
						// Teoricamente deveria multiplicar por 3,92, mas como
						// não dá, faz uma leve gambiarra para somente utilizar 
						// números inteiros.
						tempu16 = ((tempu16 * 136 + 25) / 50);
     3f6:	88 e8       	ldi	r24, 0x88	; 136
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	ac 01       	movw	r20, r24
     3fc:	24 9f       	mul	r18, r20
     3fe:	c0 01       	movw	r24, r0
     400:	25 9f       	mul	r18, r21
     402:	90 0d       	add	r25, r0
     404:	34 9f       	mul	r19, r20
     406:	90 0d       	add	r25, r0
     408:	11 24       	eor	r1, r1
     40a:	49 96       	adiw	r24, 0x19	; 25
     40c:	62 e3       	ldi	r22, 0x32	; 50
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	1e d8       	rcall	.-4036   	; 0xfffff44e <__fuse+0xff7df44e>
     412:	70 93 94 01 	sts	0x0194, r23
     416:	60 93 93 01 	sts	0x0193, r22
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     41a:	f8 94       	cli

						ATOMIC_BLOCK(ATOMIC_FORCEON)
						{
							tPIsat_params.sp = tempu16;
     41c:	70 93 a0 01 	sts	0x01A0, r23
     420:	60 93 9f 01 	sts	0x019F, r22
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     424:	78 94       	sei
						}

						OSC_TRIGGER;
     426:	5c 9a       	sbi	0x0b, 4	; 11
     428:	5c 98       	cbi	0x0b, 4	; 11

						eeprom_write_word(&ee_PI_SP, tempu16);
     42a:	60 91 93 01 	lds	r22, 0x0193
     42e:	70 91 94 01 	lds	r23, 0x0194
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	48 c0       	rjmp	.+144    	; 0x4c8 <State_Machine+0x202>
			}
			break;

		// Lê os próximos 4 bytes que terão o valor do novo KP ou KI
		case SM_WR_KP: case SM_WR_KI:
			uart_tmp = uart_getc();
     438:	de de       	rcall	.-580    	; 0x1f6 <uart_getc>
     43a:	48 2f       	mov	r20, r24

			// só aceita se for número
			if ((uart_tmp >='0') && (uart_tmp <= '9'))
     43c:	80 53       	subi	r24, 0x30	; 48
     43e:	8a 30       	cpi	r24, 0x0A	; 10
     440:	08 f0       	brcs	.+2      	; 0x444 <State_Machine+0x17e>
     442:	44 c0       	rjmp	.+136    	; 0x4cc <State_Machine+0x206>
			{
				tempu16 *= 10;
				tempu16 += uart_tmp - '0';		// converte para valor numérico
     444:	80 91 93 01 	lds	r24, 0x0193
     448:	90 91 94 01 	lds	r25, 0x0194
     44c:	9c 01       	movw	r18, r24
     44e:	f3 e0       	ldi	r31, 0x03	; 3
     450:	22 0f       	add	r18, r18
     452:	33 1f       	adc	r19, r19
     454:	fa 95       	dec	r31
     456:	e1 f7       	brne	.-8      	; 0x450 <State_Machine+0x18a>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	28 0f       	add	r18, r24
     45e:	39 1f       	adc	r19, r25
     460:	20 53       	subi	r18, 0x30	; 48
     462:	30 40       	sbci	r19, 0x00	; 0
     464:	24 0f       	add	r18, r20
     466:	31 1d       	adc	r19, r1
     468:	30 93 94 01 	sts	0x0194, r19
     46c:	20 93 93 01 	sts	0x0193, r18
				Counter++;
     470:	80 91 91 01 	lds	r24, 0x0191
     474:	8f 5f       	subi	r24, 0xFF	; 255
     476:	80 93 91 01 	sts	0x0191, r24

				if (Counter > 3)				// Se já leu os 3 bytes
     47a:	84 30       	cpi	r24, 0x04	; 4
     47c:	08 f4       	brcc	.+2      	; 0x480 <State_Machine+0x1ba>
     47e:	3d c2       	rjmp	.+1146   	; 0x8fa <__stack+0x3fb>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     480:	f8 94       	cli
				{
					ATOMIC_BLOCK(ATOMIC_FORCEON)
					{
						if (SM_WR_KP == CurState)
     482:	80 91 42 01 	lds	r24, 0x0142
     486:	85 30       	cpi	r24, 0x05	; 5
     488:	29 f4       	brne	.+10     	; 0x494 <State_Machine+0x1ce>
						{
							tPIsat_params.w_kp_pu = tempu16;
     48a:	30 93 98 01 	sts	0x0198, r19
     48e:	20 93 97 01 	sts	0x0197, r18
     492:	04 c0       	rjmp	.+8      	; 0x49c <State_Machine+0x1d6>
						}
						else
						{
							tPIsat_params.w_ki_pu = tempu16;
     494:	30 93 9a 01 	sts	0x019A, r19
     498:	20 93 99 01 	sts	0x0199, r18
						}
						tPIsat_params.l_integrator_dpu = 0;
     49c:	10 92 9b 01 	sts	0x019B, r1
     4a0:	10 92 9c 01 	sts	0x019C, r1
     4a4:	10 92 9d 01 	sts	0x019D, r1
     4a8:	10 92 9e 01 	sts	0x019E, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     4ac:	78 94       	sei
					}

					if (SM_WR_KP == CurState)
     4ae:	80 91 42 01 	lds	r24, 0x0142
     4b2:	60 91 93 01 	lds	r22, 0x0193
     4b6:	70 91 94 01 	lds	r23, 0x0194
     4ba:	85 30       	cpi	r24, 0x05	; 5
     4bc:	19 f4       	brne	.+6      	; 0x4c4 <State_Machine+0x1fe>
					{
						eeprom_write_word(&ee_PI_kp, tempu16);
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <State_Machine+0x202>
					}
					else
					{
						eeprom_write_word(&ee_PI_ki, tempu16);
     4c4:	84 e0       	ldi	r24, 0x04	; 4
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	e2 d6       	rcall	.+3524   	; 0x128e <__eewr_word_m88p>
     4ca:	f1 c1       	rjmp	.+994    	; 0x8ae <__stack+0x3af>
					CurState = SM_END;
				}
			}
			else
			{
				CurState = SM_ERROR;
     4cc:	80 e1       	ldi	r24, 0x10	; 16
     4ce:	80 93 42 01 	sts	0x0142, r24
				TipoErro = CB_ERROR_SP;
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	fe c1       	rjmp	.+1020   	; 0x8d2 <__stack+0x3d3>
			}
			break;

		// Just toggle PD5
		case SM_WR_LD:
			OSC_TRIGGER;
     4d6:	5c 9a       	sbi	0x0b, 4	; 11
     4d8:	5c 98       	cbi	0x0b, 4	; 11

			PIND |= (1<<PD5);			// Toggle PD5
     4da:	4d 9a       	sbi	0x09, 5	; 9
     4dc:	e8 c1       	rjmp	.+976    	; 0x8ae <__stack+0x3af>
			CurState = SM_END;
			break;

		// Em caso de leitura, verifica qual o valor que se quer ler
		case SM_READ:
			switch (uart_getc())
     4de:	8b de       	rcall	.-746    	; 0x1f6 <uart_getc>
     4e0:	80 37       	cpi	r24, 0x70	; 112
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <State_Machine+0x220>
     4e4:	40 c0       	rjmp	.+128    	; 0x566 <__stack+0x67>
     4e6:	81 37       	cpi	r24, 0x71	; 113
     4e8:	38 f4       	brcc	.+14     	; 0x4f8 <State_Machine+0x232>
     4ea:	89 36       	cpi	r24, 0x69	; 105
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <State_Machine+0x22a>
     4ee:	40 c0       	rjmp	.+128    	; 0x570 <__stack+0x71>
     4f0:	8f 36       	cpi	r24, 0x6F	; 111
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <State_Machine+0x230>
     4f4:	b3 c0       	rjmp	.+358    	; 0x65c <__stack+0x15d>
     4f6:	82 c0       	rjmp	.+260    	; 0x5fc <__stack+0xfd>
     4f8:	83 37       	cpi	r24, 0x73	; 115
     4fa:	21 f0       	breq	.+8      	; 0x504 <__stack+0x5>
     4fc:	86 37       	cpi	r24, 0x76	; 118
     4fe:	09 f0       	breq	.+2      	; 0x502 <__stack+0x3>
     500:	ad c0       	rjmp	.+346    	; 0x65c <__stack+0x15d>
     502:	59 c0       	rjmp	.+178    	; 0x5b6 <__stack+0xb7>
			{
				case CB_RD_SP:
					sprintf(buffer, "%03d", (tPIsat_params.sp * 50 + 68) / 136);
     504:	20 91 9f 01 	lds	r18, 0x019F
     508:	30 91 a0 01 	lds	r19, 0x01A0
     50c:	00 d0       	rcall	.+0      	; 0x50e <__stack+0xf>
     50e:	00 d0       	rcall	.+0      	; 0x510 <__stack+0x11>
     510:	00 d0       	rcall	.+0      	; 0x512 <__stack+0x13>
     512:	ed b7       	in	r30, 0x3d	; 61
     514:	fe b7       	in	r31, 0x3e	; 62
     516:	31 96       	adiw	r30, 0x01	; 1
     518:	80 e7       	ldi	r24, 0x70	; 112
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	ad b7       	in	r26, 0x3d	; 61
     51e:	be b7       	in	r27, 0x3e	; 62
     520:	12 96       	adiw	r26, 0x02	; 2
     522:	9c 93       	st	X, r25
     524:	8e 93       	st	-X, r24
     526:	11 97       	sbiw	r26, 0x01	; 1
     528:	80 e1       	ldi	r24, 0x10	; 16
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	82 e3       	ldi	r24, 0x32	; 50
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	ac 01       	movw	r20, r24
     536:	24 9f       	mul	r18, r20
     538:	c0 01       	movw	r24, r0
     53a:	25 9f       	mul	r18, r21
     53c:	90 0d       	add	r25, r0
     53e:	34 9f       	mul	r19, r20
     540:	90 0d       	add	r25, r0
     542:	11 24       	eor	r1, r1
     544:	8c 5b       	subi	r24, 0xBC	; 188
     546:	9f 4f       	sbci	r25, 0xFF	; 255
     548:	68 e8       	ldi	r22, 0x88	; 136
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	94 d7       	rcall	.+3880   	; 0x1476 <__divmodhi4>
     54e:	75 83       	std	Z+5, r23	; 0x05
     550:	64 83       	std	Z+4, r22	; 0x04
     552:	a9 d4       	rcall	.+2386   	; 0xea6 <sprintf>
     554:	8d b7       	in	r24, 0x3d	; 61
     556:	9e b7       	in	r25, 0x3e	; 62
     558:	06 96       	adiw	r24, 0x06	; 6
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	9e bf       	out	0x3e, r25	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	8d bf       	out	0x3d, r24	; 61
     564:	81 c0       	rjmp	.+258    	; 0x668 <__stack+0x169>
					break;

				case CB_RD_KP:
					sprintf(buffer, "%04d", tPIsat_params.w_kp_pu);
     566:	20 91 97 01 	lds	r18, 0x0197
     56a:	30 91 98 01 	lds	r19, 0x0198
     56e:	04 c0       	rjmp	.+8      	; 0x578 <__stack+0x79>
					break;

				case CB_RD_KI:
					sprintf(buffer, "%04d", tPIsat_params.w_ki_pu);
     570:	20 91 99 01 	lds	r18, 0x0199
     574:	30 91 9a 01 	lds	r19, 0x019A
     578:	00 d0       	rcall	.+0      	; 0x57a <__stack+0x7b>
     57a:	00 d0       	rcall	.+0      	; 0x57c <__stack+0x7d>
     57c:	00 d0       	rcall	.+0      	; 0x57e <__stack+0x7f>
     57e:	ed b7       	in	r30, 0x3d	; 61
     580:	fe b7       	in	r31, 0x3e	; 62
     582:	31 96       	adiw	r30, 0x01	; 1
     584:	80 e7       	ldi	r24, 0x70	; 112
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	ad b7       	in	r26, 0x3d	; 61
     58a:	be b7       	in	r27, 0x3e	; 62
     58c:	12 96       	adiw	r26, 0x02	; 2
     58e:	9c 93       	st	X, r25
     590:	8e 93       	st	-X, r24
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	85 e1       	ldi	r24, 0x15	; 21
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	93 83       	std	Z+3, r25	; 0x03
     59a:	82 83       	std	Z+2, r24	; 0x02
     59c:	35 83       	std	Z+5, r19	; 0x05
     59e:	24 83       	std	Z+4, r18	; 0x04
     5a0:	82 d4       	rcall	.+2308   	; 0xea6 <sprintf>
     5a2:	4d b7       	in	r20, 0x3d	; 61
     5a4:	5e b7       	in	r21, 0x3e	; 62
     5a6:	4a 5f       	subi	r20, 0xFA	; 250
     5a8:	5f 4f       	sbci	r21, 0xFF	; 255
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	5e bf       	out	0x3e, r21	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	4d bf       	out	0x3d, r20	; 61
     5b4:	59 c0       	rjmp	.+178    	; 0x668 <__stack+0x169>
					break;

				case CB_RD_VI:
					sprintf(buffer, "%03d", (VoltInp * 10) / (uint8_t)(VI_CONV_FACT + 0.5) );
     5b6:	80 91 95 01 	lds	r24, 0x0195
     5ba:	90 91 96 01 	lds	r25, 0x0196
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <__stack+0xc1>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <__stack+0xc3>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <__stack+0xc5>
     5c4:	ed b7       	in	r30, 0x3d	; 61
     5c6:	fe b7       	in	r31, 0x3e	; 62
     5c8:	31 96       	adiw	r30, 0x01	; 1
     5ca:	20 e7       	ldi	r18, 0x70	; 112
     5cc:	31 e0       	ldi	r19, 0x01	; 1
     5ce:	ad b7       	in	r26, 0x3d	; 61
     5d0:	be b7       	in	r27, 0x3e	; 62
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	3c 93       	st	X, r19
     5d6:	2e 93       	st	-X, r18
     5d8:	11 97       	sbiw	r26, 0x01	; 1
     5da:	20 e1       	ldi	r18, 0x10	; 16
     5dc:	31 e0       	ldi	r19, 0x01	; 1
     5de:	33 83       	std	Z+3, r19	; 0x03
     5e0:	22 83       	std	Z+2, r18	; 0x02
     5e2:	9c 01       	movw	r18, r24
     5e4:	73 e0       	ldi	r23, 0x03	; 3
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	7a 95       	dec	r23
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <__stack+0xe7>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	82 0f       	add	r24, r18
     5f4:	93 1f       	adc	r25, r19
     5f6:	61 e2       	ldi	r22, 0x21	; 33
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	2c c0       	rjmp	.+88     	; 0x654 <__stack+0x155>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5fc:	f8 94       	cli
					break;

				case CB_RD_VO:
					ATOMIC_BLOCK(ATOMIC_FORCEON)
					{
						tempu16 = tPIsat_params.pv;
     5fe:	80 91 a1 01 	lds	r24, 0x01A1
     602:	90 91 a2 01 	lds	r25, 0x01A2
     606:	90 93 94 01 	sts	0x0194, r25
     60a:	80 93 93 01 	sts	0x0193, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     60e:	78 94       	sei
					}					
					sprintf(buffer, "%03d", (tempu16 * 10) / (uint8_t)(VO_CONV_FACT + 0.5));
     610:	00 d0       	rcall	.+0      	; 0x612 <__stack+0x113>
     612:	00 d0       	rcall	.+0      	; 0x614 <__stack+0x115>
     614:	00 d0       	rcall	.+0      	; 0x616 <__stack+0x117>
     616:	ed b7       	in	r30, 0x3d	; 61
     618:	fe b7       	in	r31, 0x3e	; 62
     61a:	31 96       	adiw	r30, 0x01	; 1
     61c:	80 e7       	ldi	r24, 0x70	; 112
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	ad b7       	in	r26, 0x3d	; 61
     622:	be b7       	in	r27, 0x3e	; 62
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	9c 93       	st	X, r25
     628:	8e 93       	st	-X, r24
     62a:	11 97       	sbiw	r26, 0x01	; 1
     62c:	80 e1       	ldi	r24, 0x10	; 16
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	93 83       	std	Z+3, r25	; 0x03
     632:	82 83       	std	Z+2, r24	; 0x02
     634:	80 91 93 01 	lds	r24, 0x0193
     638:	90 91 94 01 	lds	r25, 0x0194
     63c:	9c 01       	movw	r18, r24
     63e:	53 e0       	ldi	r21, 0x03	; 3
     640:	22 0f       	add	r18, r18
     642:	33 1f       	adc	r19, r19
     644:	5a 95       	dec	r21
     646:	e1 f7       	brne	.-8      	; 0x640 <__stack+0x141>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	82 0f       	add	r24, r18
     64e:	93 1f       	adc	r25, r19
     650:	6b e0       	ldi	r22, 0x0B	; 11
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	fc d6       	rcall	.+3576   	; 0x144e <__udivmodhi4>
     656:	75 83       	std	Z+5, r23	; 0x05
     658:	64 83       	std	Z+4, r22	; 0x04
     65a:	a2 cf       	rjmp	.-188    	; 0x5a0 <__stack+0xa1>
					break;
				
				default:
					CurState = SM_ERROR;
     65c:	80 e1       	ldi	r24, 0x10	; 16
     65e:	80 93 42 01 	sts	0x0142, r24
					TipoErro = CB_ERROR_RD;
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	80 93 92 01 	sts	0x0192, r24
					break;
			}

			if (CurState != SM_ERROR)
     668:	80 91 42 01 	lds	r24, 0x0142
     66c:	80 31       	cpi	r24, 0x10	; 16
     66e:	09 f4       	brne	.+2      	; 0x672 <__stack+0x173>
     670:	44 c1       	rjmp	.+648    	; 0x8fa <__stack+0x3fb>
			{
				uart_puts(buffer);
     672:	80 e7       	ldi	r24, 0x70	; 112
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	e2 dd       	rcall	.-1084   	; 0x23c <uart_puts>
     678:	1a c1       	rjmp	.+564    	; 0x8ae <__stack+0x3af>
				CurState = SM_END;
			} 
			break;

		case SM_VFD_CMD:
			Counter = 0;
     67a:	10 92 91 01 	sts	0x0191, r1
			tempu16 = 0;
     67e:	10 92 94 01 	sts	0x0194, r1
     682:	10 92 93 01 	sts	0x0193, r1
			tempu8 = 0;
     686:	10 92 6f 01 	sts	0x016F, r1
			switch (uart_getc())
     68a:	b5 dd       	rcall	.-1174   	; 0x1f6 <uart_getc>
     68c:	8c 36       	cpi	r24, 0x6C	; 108
     68e:	29 f1       	breq	.+74     	; 0x6da <__stack+0x1db>
     690:	8d 36       	cpi	r24, 0x6D	; 109
     692:	40 f4       	brcc	.+16     	; 0x6a4 <__stack+0x1a5>
     694:	82 36       	cpi	r24, 0x62	; 98
     696:	f9 f0       	breq	.+62     	; 0x6d6 <__stack+0x1d7>
     698:	83 36       	cpi	r24, 0x63	; 99
     69a:	81 f0       	breq	.+32     	; 0x6bc <__stack+0x1bd>
     69c:	81 36       	cpi	r24, 0x61	; 97
     69e:	09 f0       	breq	.+2      	; 0x6a2 <__stack+0x1a3>
     6a0:	2c c1       	rjmp	.+600    	; 0x8fa <__stack+0x3fb>
     6a2:	13 c0       	rjmp	.+38     	; 0x6ca <__stack+0x1cb>
     6a4:	83 37       	cpi	r24, 0x73	; 115
     6a6:	a9 f0       	breq	.+42     	; 0x6d2 <__stack+0x1d3>
     6a8:	84 37       	cpi	r24, 0x74	; 116
     6aa:	21 f0       	breq	.+8      	; 0x6b4 <__stack+0x1b5>
     6ac:	82 37       	cpi	r24, 0x72	; 114
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <__stack+0x1b3>
     6b0:	24 c1       	rjmp	.+584    	; 0x8fa <__stack+0x3fb>
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__stack+0x1b9>
			{
				case VFD_SET:
					CurState = SM_VFD_SET; 
     6b4:	8a e0       	ldi	r24, 0x0A	; 10
     6b6:	fc c0       	rjmp	.+504    	; 0x8b0 <__stack+0x3b1>
					break;
				
				case VFD_SETCHAR:
					CurState = SM_VFD_SETCHAR;
     6b8:	8b e0       	ldi	r24, 0x0B	; 11
     6ba:	fa c0       	rjmp	.+500    	; 0x8b0 <__stack+0x3b1>
					break;

				case VFD_CLEAR:
					vfd_clear();
     6bc:	80 91 80 00 	lds	r24, 0x0080
     6c0:	8f 73       	andi	r24, 0x3F	; 63
     6c2:	80 93 80 00 	sts	0x0080, r24
     6c6:	29 9a       	sbi	0x05, 1	; 5
     6c8:	f2 c0       	rjmp	.+484    	; 0x8ae <__stack+0x3af>
					CurState = SM_END;
					break;

				case VFD_ALL:
					vfd_setall();
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	6f ef       	ldi	r22, 0xFF	; 255
     6ce:	71 e0       	ldi	r23, 0x01	; 1
     6d0:	47 c0       	rjmp	.+142    	; 0x760 <__stack+0x261>
					CurState = SM_END;
					break;

				case VFD_STRING:
					CurState = SM_VFD_STR;
     6d2:	8c e0       	ldi	r24, 0x0C	; 12
     6d4:	ed c0       	rjmp	.+474    	; 0x8b0 <__stack+0x3b1>
					break;

				case VFD_BRT:
					CurState = SM_VFD_BRT;
     6d6:	8d e0       	ldi	r24, 0x0D	; 13
     6d8:	eb c0       	rjmp	.+470    	; 0x8b0 <__stack+0x3b1>
					break;

				case VFD_SCRL:
					CurState = SM_VFD_SCRL;
     6da:	8e e0       	ldi	r24, 0x0E	; 14
     6dc:	e9 c0       	rjmp	.+466    	; 0x8b0 <__stack+0x3b1>
					break;
			}
			break;

		case SM_VFD_SET:
			uart_tmp = uart_getc();
     6de:	8b dd       	rcall	.-1258   	; 0x1f6 <uart_getc>
     6e0:	98 2f       	mov	r25, r24

			switch (uart_tmp)
     6e2:	87 34       	cpi	r24, 0x47	; 71
     6e4:	30 f4       	brcc	.+12     	; 0x6f2 <__stack+0x1f3>
     6e6:	81 34       	cpi	r24, 0x41	; 65
     6e8:	40 f4       	brcc	.+16     	; 0x6fa <__stack+0x1fb>
     6ea:	80 53       	subi	r24, 0x30	; 48
     6ec:	8a 30       	cpi	r24, 0x0A	; 10
     6ee:	48 f4       	brcc	.+18     	; 0x702 <__stack+0x203>
     6f0:	06 c0       	rjmp	.+12     	; 0x6fe <__stack+0x1ff>
     6f2:	81 56       	subi	r24, 0x61	; 97
     6f4:	86 30       	cpi	r24, 0x06	; 6
     6f6:	28 f4       	brcc	.+10     	; 0x702 <__stack+0x203>
			{
				case 'a'...'f':
					uart_tmp -= 0x20;
     6f8:	90 52       	subi	r25, 0x20	; 32
				case 'A'...'F':
					uart_tmp -= 'A';
					uart_tmp += 10;
     6fa:	97 53       	subi	r25, 0x37	; 55
     6fc:	08 c0       	rjmp	.+16     	; 0x70e <__stack+0x20f>
					break;
				case '0'...'9':
					uart_tmp -= '0';
     6fe:	98 2f       	mov	r25, r24
     700:	06 c0       	rjmp	.+12     	; 0x70e <__stack+0x20f>
					break;
				default:
					CurState = SM_ERROR;
     702:	80 e1       	ldi	r24, 0x10	; 16
     704:	80 93 42 01 	sts	0x0142, r24
					TipoErro = VFD_ERROR_VAL;
     708:	88 e0       	ldi	r24, 0x08	; 8
     70a:	80 93 92 01 	sts	0x0192, r24
					break;
			}
			if (Counter++ < 2)
     70e:	80 91 91 01 	lds	r24, 0x0191
     712:	28 2f       	mov	r18, r24
     714:	2f 5f       	subi	r18, 0xFF	; 255
     716:	20 93 91 01 	sts	0x0191, r18
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	40 f4       	brcc	.+16     	; 0x72e <__stack+0x22f>
			{
				tempu8 *= 16;
				tempu8 += uart_tmp;
     71e:	80 91 6f 01 	lds	r24, 0x016F
     722:	82 95       	swap	r24
     724:	80 7f       	andi	r24, 0xF0	; 240
     726:	89 0f       	add	r24, r25
     728:	80 93 6f 01 	sts	0x016F, r24
     72c:	08 95       	ret
			}
			else 
			{
				tempu16 *= 16;
				tempu16 += uart_tmp;
     72e:	60 91 93 01 	lds	r22, 0x0193
     732:	70 91 94 01 	lds	r23, 0x0194
     736:	34 e0       	ldi	r19, 0x04	; 4
     738:	66 0f       	add	r22, r22
     73a:	77 1f       	adc	r23, r23
     73c:	3a 95       	dec	r19
     73e:	e1 f7       	brne	.-8      	; 0x738 <__stack+0x239>
     740:	69 0f       	add	r22, r25
     742:	71 1d       	adc	r23, r1
     744:	70 93 94 01 	sts	0x0194, r23
     748:	60 93 93 01 	sts	0x0193, r22

				if (Counter > 4)
     74c:	25 30       	cpi	r18, 0x05	; 5
     74e:	08 f4       	brcc	.+2      	; 0x752 <__stack+0x253>
     750:	d4 c0       	rjmp	.+424    	; 0x8fa <__stack+0x3fb>
				{
					if (tempu16 > 0x1FF)
     752:	52 e0       	ldi	r21, 0x02	; 2
     754:	60 30       	cpi	r22, 0x00	; 0
     756:	75 07       	cpc	r23, r21
     758:	08 f0       	brcs	.+2      	; 0x75c <__stack+0x25d>
     75a:	3f c0       	rjmp	.+126    	; 0x7da <__stack+0x2db>
						CurState = SM_ERROR;
						TipoErro = VFD_ERROR_VAL;
					}
					else
					{
						vfd_set(tempu8, tempu16);
     75c:	80 91 6f 01 	lds	r24, 0x016F
     760:	02 d2       	rcall	.+1028   	; 0xb66 <vfd_set>
     762:	a5 c0       	rjmp	.+330    	; 0x8ae <__stack+0x3af>
				}
			}
			break;

		case SM_VFD_SETCHAR:
			uart_tmp = uart_getc();
     764:	48 dd       	rcall	.-1392   	; 0x1f6 <uart_getc>
     766:	98 2f       	mov	r25, r24

			if (Counter++ == 0)
     768:	80 91 91 01 	lds	r24, 0x0191
     76c:	28 2f       	mov	r18, r24
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	20 93 91 01 	sts	0x0191, r18
     774:	88 23       	and	r24, r24
     776:	19 f4       	brne	.+6      	; 0x77e <__stack+0x27f>
			{
				tempu8 = uart_tmp;
     778:	90 93 6f 01 	sts	0x016F, r25
     77c:	08 95       	ret
			}
			else
			{
				switch (uart_tmp)
     77e:	97 34       	cpi	r25, 0x47	; 71
     780:	38 f4       	brcc	.+14     	; 0x790 <__stack+0x291>
     782:	91 34       	cpi	r25, 0x41	; 65
     784:	50 f4       	brcc	.+20     	; 0x79a <__stack+0x29b>
     786:	89 2f       	mov	r24, r25
     788:	80 53       	subi	r24, 0x30	; 48
     78a:	8a 30       	cpi	r24, 0x0A	; 10
     78c:	50 f4       	brcc	.+20     	; 0x7a2 <__stack+0x2a3>
     78e:	07 c0       	rjmp	.+14     	; 0x79e <__stack+0x29f>
     790:	89 2f       	mov	r24, r25
     792:	81 56       	subi	r24, 0x61	; 97
     794:	86 30       	cpi	r24, 0x06	; 6
     796:	28 f4       	brcc	.+10     	; 0x7a2 <__stack+0x2a3>
				{
					case 'a'...'f':
						uart_tmp -= 0x20;
     798:	90 52       	subi	r25, 0x20	; 32
					case 'A'...'F':
						uart_tmp -= 'A';
						uart_tmp += 10;
     79a:	97 53       	subi	r25, 0x37	; 55
     79c:	08 c0       	rjmp	.+16     	; 0x7ae <__stack+0x2af>
						break;
					case '0'...'9':
						uart_tmp -= '0';
     79e:	98 2f       	mov	r25, r24
     7a0:	06 c0       	rjmp	.+12     	; 0x7ae <__stack+0x2af>
						break;
					default:
						CurState = SM_ERROR;
     7a2:	80 e1       	ldi	r24, 0x10	; 16
     7a4:	80 93 42 01 	sts	0x0142, r24
						TipoErro = VFD_ERROR_VAL;
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	80 93 92 01 	sts	0x0192, r24
						break;
				}

				tempu16 *= 16;
				tempu16 += uart_tmp;
     7ae:	60 91 93 01 	lds	r22, 0x0193
     7b2:	70 91 94 01 	lds	r23, 0x0194
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	66 0f       	add	r22, r22
     7ba:	77 1f       	adc	r23, r23
     7bc:	8a 95       	dec	r24
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <__stack+0x2b9>
     7c0:	69 0f       	add	r22, r25
     7c2:	71 1d       	adc	r23, r1
     7c4:	70 93 94 01 	sts	0x0194, r23
     7c8:	60 93 93 01 	sts	0x0193, r22

				if (Counter > 3)
     7cc:	24 30       	cpi	r18, 0x04	; 4
     7ce:	08 f4       	brcc	.+2      	; 0x7d2 <__stack+0x2d3>
     7d0:	94 c0       	rjmp	.+296    	; 0x8fa <__stack+0x3fb>
				{
					if (tempu16 > 0x1FF)
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	60 30       	cpi	r22, 0x00	; 0
     7d6:	78 07       	cpc	r23, r24
     7d8:	28 f0       	brcs	.+10     	; 0x7e4 <__stack+0x2e5>
					{
						CurState = SM_ERROR;
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	80 93 42 01 	sts	0x0142, r24
						TipoErro = VFD_ERROR_VAL;
     7e0:	88 e0       	ldi	r24, 0x08	; 8
     7e2:	77 c0       	rjmp	.+238    	; 0x8d2 <__stack+0x3d3>
					}
					else
					{
						vfd_setchar(tempu8, tempu16);
     7e4:	80 91 6f 01 	lds	r24, 0x016F
     7e8:	eb d1       	rcall	.+982    	; 0xbc0 <vfd_setchar>
     7ea:	61 c0       	rjmp	.+194    	; 0x8ae <__stack+0x3af>
				}
			}
			break;

		case SM_VFD_BRT:
			uart_tmp = uart_getc();
     7ec:	04 dd       	rcall	.-1528   	; 0x1f6 <uart_getc>
     7ee:	98 2f       	mov	r25, r24

			switch (uart_tmp)
     7f0:	87 34       	cpi	r24, 0x47	; 71
     7f2:	30 f4       	brcc	.+12     	; 0x800 <__stack+0x301>
     7f4:	81 34       	cpi	r24, 0x41	; 65
     7f6:	40 f4       	brcc	.+16     	; 0x808 <__stack+0x309>
     7f8:	80 53       	subi	r24, 0x30	; 48
     7fa:	8a 30       	cpi	r24, 0x0A	; 10
     7fc:	48 f4       	brcc	.+18     	; 0x810 <__stack+0x311>
     7fe:	06 c0       	rjmp	.+12     	; 0x80c <__stack+0x30d>
     800:	81 56       	subi	r24, 0x61	; 97
     802:	86 30       	cpi	r24, 0x06	; 6
     804:	28 f4       	brcc	.+10     	; 0x810 <__stack+0x311>
			{
				case 'a'...'f':
					uart_tmp -= 0x20;
     806:	90 52       	subi	r25, 0x20	; 32
				case 'A'...'F':
					uart_tmp -= 'A';
					uart_tmp += 10;
     808:	97 53       	subi	r25, 0x37	; 55
     80a:	08 c0       	rjmp	.+16     	; 0x81c <__stack+0x31d>
					break;
				case '0'...'9':
					uart_tmp -= '0';
     80c:	98 2f       	mov	r25, r24
     80e:	06 c0       	rjmp	.+12     	; 0x81c <__stack+0x31d>
					break;
				default:
					CurState = SM_ERROR;
     810:	80 e1       	ldi	r24, 0x10	; 16
     812:	80 93 42 01 	sts	0x0142, r24
					TipoErro = VFD_ERROR_VAL;
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	80 93 92 01 	sts	0x0192, r24
					break;
			}
			tempu8 *= 16;
			tempu8 += uart_tmp;
     81c:	20 91 6f 01 	lds	r18, 0x016F
     820:	22 95       	swap	r18
     822:	20 7f       	andi	r18, 0xF0	; 240
     824:	29 0f       	add	r18, r25
     826:	20 93 6f 01 	sts	0x016F, r18
			Counter++;
     82a:	80 91 91 01 	lds	r24, 0x0191
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 91 01 	sts	0x0191, r24

			if (Counter > 1)
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	08 f4       	brcc	.+2      	; 0x83a <__stack+0x33b>
     838:	60 c0       	rjmp	.+192    	; 0x8fa <__stack+0x3fb>
			{
				vfd_brightness(tempu8);
     83a:	82 2f       	mov	r24, r18
     83c:	d1 d1       	rcall	.+930    	; 0xbe0 <vfd_brightness>
     83e:	37 c0       	rjmp	.+110    	; 0x8ae <__stack+0x3af>
				CurState = SM_END;
			}
			break;

		case SM_VFD_SCRL:
			uart_tmp = uart_getc();
     840:	da dc       	rcall	.-1612   	; 0x1f6 <uart_getc>
     842:	98 2f       	mov	r25, r24

			switch (uart_tmp)
     844:	87 34       	cpi	r24, 0x47	; 71
     846:	30 f4       	brcc	.+12     	; 0x854 <__stack+0x355>
     848:	81 34       	cpi	r24, 0x41	; 65
     84a:	40 f4       	brcc	.+16     	; 0x85c <__stack+0x35d>
     84c:	80 53       	subi	r24, 0x30	; 48
     84e:	8a 30       	cpi	r24, 0x0A	; 10
     850:	48 f4       	brcc	.+18     	; 0x864 <__stack+0x365>
     852:	06 c0       	rjmp	.+12     	; 0x860 <__stack+0x361>
     854:	81 56       	subi	r24, 0x61	; 97
     856:	86 30       	cpi	r24, 0x06	; 6
     858:	28 f4       	brcc	.+10     	; 0x864 <__stack+0x365>
			{
				case 'a'...'f':
					uart_tmp -= 0x20;
     85a:	90 52       	subi	r25, 0x20	; 32
				case 'A'...'F':
					uart_tmp -= 'A';
					uart_tmp += 10;
     85c:	97 53       	subi	r25, 0x37	; 55
     85e:	08 c0       	rjmp	.+16     	; 0x870 <__stack+0x371>
					break;
				case '0'...'9':
					uart_tmp -= '0';
     860:	98 2f       	mov	r25, r24
     862:	06 c0       	rjmp	.+12     	; 0x870 <__stack+0x371>
					break;
				default:
					CurState = SM_ERROR;
     864:	80 e1       	ldi	r24, 0x10	; 16
     866:	80 93 42 01 	sts	0x0142, r24
					TipoErro = VFD_ERROR_VAL;
     86a:	88 e0       	ldi	r24, 0x08	; 8
     86c:	80 93 92 01 	sts	0x0192, r24
					break;
			}
			tempu8 *= 16;
			tempu8 += uart_tmp;
     870:	20 91 6f 01 	lds	r18, 0x016F
     874:	22 95       	swap	r18
     876:	20 7f       	andi	r18, 0xF0	; 240
     878:	29 0f       	add	r18, r25
     87a:	20 93 6f 01 	sts	0x016F, r18
			Counter++;
     87e:	80 91 91 01 	lds	r24, 0x0191
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	80 93 91 01 	sts	0x0191, r24

			if (Counter > 1)
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	b8 f1       	brcs	.+110    	; 0x8fa <__stack+0x3fb>
			{
				vfd_scrollspeed(tempu8);
     88c:	82 2f       	mov	r24, r18
     88e:	0e d2       	rcall	.+1052   	; 0xcac <vfd_scrollspeed>
     890:	0e c0       	rjmp	.+28     	; 0x8ae <__stack+0x3af>
				CurState = SM_END;
			}
			break;

		case SM_VFD_STR:
			uart_tmp = uart_getc();
     892:	b1 dc       	rcall	.-1694   	; 0x1f6 <uart_getc>
     894:	98 2f       	mov	r25, r24
     896:	80 91 91 01 	lds	r24, 0x0191

			if (uart_tmp == 0x0D)		// 0x0D = Enter
     89a:	9d 30       	cpi	r25, 0x0D	; 13
     89c:	61 f4       	brne	.+24     	; 0x8b6 <__stack+0x3b7>
			{
				buffer[Counter] = 0;
     89e:	e8 2f       	mov	r30, r24
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	e0 59       	subi	r30, 0x90	; 144
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	10 82       	st	Z, r1

				vfd_setstring(buffer);
     8a8:	80 e7       	ldi	r24, 0x70	; 112
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	ae d1       	rcall	.+860    	; 0xc0a <vfd_setstring>
				CurState = SM_END;
     8ae:	8f e0       	ldi	r24, 0x0F	; 15
     8b0:	80 93 42 01 	sts	0x0142, r24
     8b4:	08 95       	ret
			}
			else
			{
				buffer[Counter] = uart_tmp;
     8b6:	e8 2f       	mov	r30, r24
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e0 59       	subi	r30, 0x90	; 144
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	90 83       	st	Z, r25
				Counter++;
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 91 01 	sts	0x0191, r24

				if (Counter > 32)
     8c6:	81 32       	cpi	r24, 0x21	; 33
     8c8:	c0 f0       	brcs	.+48     	; 0x8fa <__stack+0x3fb>
				{
					CurState = SM_ERROR;
     8ca:	80 e1       	ldi	r24, 0x10	; 16
     8cc:	80 93 42 01 	sts	0x0142, r24
					TipoErro = VFD_ERROR_STR;
     8d0:	89 e0       	ldi	r24, 0x09	; 9
     8d2:	80 93 92 01 	sts	0x0192, r24
     8d6:	08 95       	ret
				}
			}
			break;

		case SM_END:
			TCCR2B = 0;					// Para Timer2
     8d8:	10 92 b1 00 	sts	0x00B1, r1
			uart_putc(CB_FINAL_MSG);
     8dc:	81 e2       	ldi	r24, 0x21	; 33
     8de:	a6 dc       	rcall	.-1716   	; 0x22c <uart_putc>
			CurState = SM_IDLE;
     8e0:	10 92 42 01 	sts	0x0142, r1
     8e4:	08 95       	ret
			break;

		case SM_ERROR:
			TCCR2B = 0;					// Para Timer2
     8e6:	10 92 b1 00 	sts	0x00B1, r1
			uart_putc(CB_ERROR_MSG);
     8ea:	8f e3       	ldi	r24, 0x3F	; 63
     8ec:	9f dc       	rcall	.-1730   	; 0x22c <uart_putc>
			uart_putc(TipoErro + '0');
     8ee:	80 91 92 01 	lds	r24, 0x0192
     8f2:	80 5d       	subi	r24, 0xD0	; 208
     8f4:	9b dc       	rcall	.-1738   	; 0x22c <uart_putc>
			CurState = SM_IDLE;
     8f6:	10 92 42 01 	sts	0x0142, r1
     8fa:	08 95       	ret

000008fc <__vector_21>:
  return((int16_t)l_temp_dpu);
} 

// Inicia nova conversão e faz o controle PI
ISR(ADC_vect)
{
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
	static uint8_t InpCounter;
	int16_t error;

	if (InpCounter++ == 0)
     926:	80 91 43 01 	lds	r24, 0x0143
     92a:	98 2f       	mov	r25, r24
     92c:	9f 5f       	subi	r25, 0xFF	; 255
     92e:	90 93 43 01 	sts	0x0143, r25
     932:	88 23       	and	r24, r24
     934:	89 f4       	brne	.+34     	; 0x958 <__vector_21+0x5c>
	{
		ADMUX = ((1<<REFS0) | (1<<REFS1)) + VOUT_CH;
     936:	80 ec       	ldi	r24, 0xC0	; 192
     938:	80 93 7c 00 	sts	0x007C, r24
		VoltInp = ADC;
     93c:	80 91 78 00 	lds	r24, 0x0078
     940:	90 91 79 00 	lds	r25, 0x0079
     944:	90 93 96 01 	sts	0x0196, r25
     948:	80 93 95 01 	sts	0x0195, r24
		ADCSRA |= (1<<ADSC);
     94c:	80 91 7a 00 	lds	r24, 0x007A
     950:	80 64       	ori	r24, 0x40	; 64
     952:	80 93 7a 00 	sts	0x007A, r24
     956:	d3 c0       	rjmp	.+422    	; 0xafe <__vector_21+0x202>
	}
	else
	{
		if (InpCounter > 250)
     958:	9b 3f       	cpi	r25, 0xFB	; 251
     95a:	28 f0       	brcs	.+10     	; 0x966 <__vector_21+0x6a>
		{
			ADMUX = ((1<<REFS0) | (1<<REFS1)) + VIN_CH;
     95c:	81 ec       	ldi	r24, 0xC1	; 193
     95e:	80 93 7c 00 	sts	0x007C, r24
			InpCounter = 0;
     962:	10 92 43 01 	sts	0x0143, r1
		}

		ADCSRA |= (1<<ADSC);
     966:	80 91 7a 00 	lds	r24, 0x007A
     96a:	80 64       	ori	r24, 0x40	; 64
     96c:	80 93 7a 00 	sts	0x007A, r24

		tPIsat_params.pv = ADC;
     970:	80 91 78 00 	lds	r24, 0x0078
     974:	90 91 79 00 	lds	r25, 0x0079
     978:	90 93 a2 01 	sts	0x01A2, r25
     97c:	80 93 a1 01 	sts	0x01A1, r24
		error =  tPIsat_params.sp - tPIsat_params.pv;
     980:	60 91 9f 01 	lds	r22, 0x019F
     984:	70 91 a0 01 	lds	r23, 0x01A0
     988:	e0 91 a1 01 	lds	r30, 0x01A1
     98c:	f0 91 a2 01 	lds	r31, 0x01A2
  int32_t l_proportional_dpu;         /* proportional term, error(k)*Kp */
  int32_t l_integral_dpu;             /* integral term, error(k)*Kp*Ki* */

  /* calculate the proportional term: error(k) * Kp [DPU]
     NOTE: error(k) MUST have been saturated to +/-(4PU-1) BEFORE calling this routine */
  l_proportional_dpu = (int32_t)tPIsat_params->w_kp_pu * (int32_t)w_error_pu; /* (1) */
     990:	20 91 97 01 	lds	r18, 0x0197
     994:	30 91 98 01 	lds	r19, 0x0198
     998:	6e 1b       	sub	r22, r30
     99a:	7f 0b       	sbc	r23, r31
     99c:	88 27       	eor	r24, r24
     99e:	77 fd       	sbrc	r23, 7
     9a0:	80 95       	com	r24
     9a2:	98 2f       	mov	r25, r24
     9a4:	44 27       	eor	r20, r20
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	40 95       	com	r20
     9aa:	54 2f       	mov	r21, r20
     9ac:	31 d5       	rcall	.+2658   	; 0x1410 <__mulsi3>
  /* saturate to +/-(4DPU-1), to allow for rescaling to single precision */
  l_proportional_dpu = sat_l(l_proportional_dpu, -FOUR_DPU_MINUS_1, FOUR_DPU_MINUS_1); /* (1) */
     9ae:	6f 3f       	cpi	r22, 0xFF	; 255
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	72 07       	cpc	r23, r18
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	82 07       	cpc	r24, r18
     9b8:	2f e0       	ldi	r18, 0x0F	; 15
     9ba:	92 07       	cpc	r25, r18
     9bc:	4c f0       	brlt	.+18     	; 0x9d0 <__vector_21+0xd4>
     9be:	7f ef       	ldi	r23, 0xFF	; 255
     9c0:	e7 2e       	mov	r14, r23
     9c2:	7f ef       	ldi	r23, 0xFF	; 255
     9c4:	f7 2e       	mov	r15, r23
     9c6:	7f ef       	ldi	r23, 0xFF	; 255
     9c8:	07 2f       	mov	r16, r23
     9ca:	7f e0       	ldi	r23, 0x0F	; 15
     9cc:	17 2f       	mov	r17, r23
     9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <__vector_21+0xf6>
     9d0:	7b 01       	movw	r14, r22
     9d2:	8c 01       	movw	r16, r24
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	e8 16       	cp	r14, r24
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	f8 06       	cpc	r15, r24
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	08 07       	cpc	r16, r24
     9e0:	80 ef       	ldi	r24, 0xF0	; 240
     9e2:	18 07       	cpc	r17, r24
     9e4:	34 f4       	brge	.+12     	; 0x9f2 <__vector_21+0xf6>
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	e6 2e       	mov	r14, r22
     9ea:	f1 2c       	mov	r15, r1
     9ec:	01 2d       	mov	r16, r1
     9ee:	60 ef       	ldi	r22, 0xF0	; 240
     9f0:	16 2f       	mov	r17, r22

  /* calculate the integrator input term: error(k) * Kp * [DPU] */
  l_temp_dpu = (int32_t)tPIsat_params->w_ki_pu * dtos(l_proportional_dpu); /* (2) */
     9f2:	20 91 99 01 	lds	r18, 0x0199
     9f6:	30 91 9a 01 	lds	r19, 0x019A
     9fa:	c8 01       	movw	r24, r16
     9fc:	b7 01       	movw	r22, r14
     9fe:	53 e0       	ldi	r21, 0x03	; 3
     a00:	66 0f       	add	r22, r22
     a02:	77 1f       	adc	r23, r23
     a04:	88 1f       	adc	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	5a 95       	dec	r21
     a0a:	d1 f7       	brne	.-12     	; 0xa00 <__vector_21+0x104>
     a0c:	bc 01       	movw	r22, r24
     a0e:	99 27       	eor	r25, r25
     a10:	77 fd       	sbrc	r23, 7
     a12:	90 95       	com	r25
     a14:	89 2f       	mov	r24, r25
     a16:	44 27       	eor	r20, r20
     a18:	37 fd       	sbrc	r19, 7
     a1a:	40 95       	com	r20
     a1c:	54 2f       	mov	r21, r20
     a1e:	f8 d4       	rcall	.+2544   	; 0x1410 <__mulsi3>
  /* saturate to +/-(8DPU-1), to prevent the integrator from overflowing */
  l_temp_dpu = sat_l(l_temp_dpu, -EIGHT_DPU_MINUS_1, EIGHT_DPU_MINUS_1); /* (2) */
     a20:	6f 3f       	cpi	r22, 0xFF	; 255
     a22:	ef ef       	ldi	r30, 0xFF	; 255
     a24:	7e 07       	cpc	r23, r30
     a26:	ef ef       	ldi	r30, 0xFF	; 255
     a28:	8e 07       	cpc	r24, r30
     a2a:	ef e1       	ldi	r30, 0x1F	; 31
     a2c:	9e 07       	cpc	r25, r30
     a2e:	2c f0       	brlt	.+10     	; 0xa3a <__vector_21+0x13e>
     a30:	6f ef       	ldi	r22, 0xFF	; 255
     a32:	7f ef       	ldi	r23, 0xFF	; 255
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	9f e1       	ldi	r25, 0x1F	; 31
     a38:	0c c0       	rjmp	.+24     	; 0xa52 <__vector_21+0x156>
     a3a:	61 30       	cpi	r22, 0x01	; 1
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	72 07       	cpc	r23, r18
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	82 07       	cpc	r24, r18
     a44:	20 ee       	ldi	r18, 0xE0	; 224
     a46:	92 07       	cpc	r25, r18
     a48:	24 f4       	brge	.+8      	; 0xa52 <__vector_21+0x156>
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 ee       	ldi	r25, 0xE0	; 224

  /* calculate the integral term: error(k)*Kp*Ki*(1+1/z)/(1-1/z). Because the integrator
     is saturated between +/-(16DPU-1), this term is bounded between +/-24DPU */
  l_integral_dpu = l_temp_dpu + tPIsat_params->l_integrator_dpu; /* (3) */
     a52:	20 91 9b 01 	lds	r18, 0x019B
     a56:	30 91 9c 01 	lds	r19, 0x019C
     a5a:	40 91 9d 01 	lds	r20, 0x019D
     a5e:	50 91 9e 01 	lds	r21, 0x019E
     a62:	26 0f       	add	r18, r22
     a64:	37 1f       	adc	r19, r23
     a66:	48 1f       	adc	r20, r24
     a68:	59 1f       	adc	r21, r25

  /* update the integrator: integrator(k) = integrator(k-1) + 2*error(k)*Kp*Ki
     as l_temp_DPU is saturated to +/-(8DPU-1) this fits into a long word
     if the integrator is limited to +/-(16DPU-1) */
  tPIsat_params->l_integrator_dpu = l_integral_dpu + l_temp_dpu; /* (4) */
     a6a:	62 0f       	add	r22, r18
     a6c:	73 1f       	adc	r23, r19
     a6e:	84 1f       	adc	r24, r20
     a70:	95 1f       	adc	r25, r21

  /* saturate the integrator to +/-16DPU */
  tPIsat_params->l_integrator_dpu = sat_l(tPIsat_params->l_integrator_dpu, -SIXTEEN_DPU_MINUS_1, SIXTEEN_DPU_MINUS_1); /* (4) */
     a72:	6f 3f       	cpi	r22, 0xFF	; 255
     a74:	ef ef       	ldi	r30, 0xFF	; 255
     a76:	7e 07       	cpc	r23, r30
     a78:	ef ef       	ldi	r30, 0xFF	; 255
     a7a:	8e 07       	cpc	r24, r30
     a7c:	ef e3       	ldi	r30, 0x3F	; 63
     a7e:	9e 07       	cpc	r25, r30
     a80:	2c f0       	brlt	.+10     	; 0xa8c <__vector_21+0x190>
     a82:	6f ef       	ldi	r22, 0xFF	; 255
     a84:	7f ef       	ldi	r23, 0xFF	; 255
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	9f e3       	ldi	r25, 0x3F	; 63
     a8a:	0c c0       	rjmp	.+24     	; 0xaa4 <__vector_21+0x1a8>
     a8c:	61 30       	cpi	r22, 0x01	; 1
     a8e:	e0 e0       	ldi	r30, 0x00	; 0
     a90:	7e 07       	cpc	r23, r30
     a92:	e0 e0       	ldi	r30, 0x00	; 0
     a94:	8e 07       	cpc	r24, r30
     a96:	e0 ec       	ldi	r30, 0xC0	; 192
     a98:	9e 07       	cpc	r25, r30
     a9a:	24 f4       	brge	.+8      	; 0xaa4 <__vector_21+0x1a8>
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 ec       	ldi	r25, 0xC0	; 192
     aa4:	60 93 9b 01 	sts	0x019B, r22
     aa8:	70 93 9c 01 	sts	0x019C, r23
     aac:	80 93 9d 01 	sts	0x019D, r24
     ab0:	90 93 9e 01 	sts	0x019E, r25

  /* calculate the output term: proportional(k) + integral(k) [DPU]
     this is bounded between +/-28DPU */
  l_temp_dpu = l_proportional_dpu + l_integral_dpu; /* (5) */
     ab4:	ca 01       	movw	r24, r20
     ab6:	b9 01       	movw	r22, r18
     ab8:	6e 0d       	add	r22, r14
     aba:	7f 1d       	adc	r23, r15
     abc:	80 1f       	adc	r24, r16
     abe:	91 1f       	adc	r25, r17
  /* saturate the output term between the lower limit and the upper limit */
  l_temp_dpu = sat_l(l_temp_dpu, stod(w_ll), stod(w_ul));
     ac0:	60 30       	cpi	r22, 0x00	; 0
     ac2:	20 e8       	ldi	r18, 0x80	; 128
     ac4:	72 07       	cpc	r23, r18
     ac6:	26 e1       	ldi	r18, 0x16	; 22
     ac8:	82 07       	cpc	r24, r18
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	92 07       	cpc	r25, r18
     ace:	2c f0       	brlt	.+10     	; 0xada <__vector_21+0x1de>
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e8       	ldi	r23, 0x80	; 128
     ad4:	86 e1       	ldi	r24, 0x16	; 22
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <__vector_21+0x1ea>
     ada:	97 ff       	sbrs	r25, 7
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <__vector_21+0x1ea>
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
  l_temp_dpu = dtos(l_temp_dpu);
     ae6:	33 e0       	ldi	r19, 0x03	; 3
     ae8:	66 0f       	add	r22, r22
     aea:	77 1f       	adc	r23, r23
     aec:	88 1f       	adc	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	3a 95       	dec	r19
     af2:	d1 f7       	brne	.-12     	; 0xae8 <__vector_21+0x1ec>

		ADCSRA |= (1<<ADSC);

		tPIsat_params.pv = ADC;
		error =  tPIsat_params.sp - tPIsat_params.pv;
		OCR0A = fw_PI_controller (error, &tPIsat_params, 0, 180);
     af4:	bb 27       	eor	r27, r27
     af6:	97 fd       	sbrc	r25, 7
     af8:	b0 95       	com	r27
     afa:	ab 2f       	mov	r26, r27
     afc:	87 bd       	out	0x27, r24	; 39
	}
}
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <vfd_init>:
	uint8_t i;

	// All pins, except MISO (PB4), as outputs. Pull-up on MISO;
	// PB0 is load, PB1 is blank -> MAX6921
	// Setup PB2 as a output, so I won't interfere with SPI
	VFD_PORT |= (1<<VFD_DO) | (1<<VFD_BLANK) ;
     b28:	85 b1       	in	r24, 0x05	; 5
     b2a:	82 61       	ori	r24, 0x12	; 18
     b2c:	85 b9       	out	0x05, r24	; 5
	VFD_DDR |= (1<<VFD_LOAD) | (1<<VFD_BLANK) | (1<<VFD_DI) | (1<<VFD_CLK) | (1<<VFD_SS);
     b2e:	84 b1       	in	r24, 0x04	; 4
     b30:	8f 62       	ori	r24, 0x2F	; 47
     b32:	84 b9       	out	0x04, r24	; 4
	// TIMSK1 = (1<<TOIE1);

	// Setup timer 1 for PWM on blank pin (PB1/OC1A)
	// 8 bit PWM - Inverting logic, so 0xFF is maximum brightness
	// PS = 8 - > Frequency is 9000 Hz
	OCR1AL = 0xFF;
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = (1<<COM1A1) | (1<<COM1A0) | (1<<WGM10);
     b3a:	81 ec       	ldi	r24, 0xC1	; 193
     b3c:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (1<<WGM12) | (1<<CS11);
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	80 93 81 00 	sts	0x0081, r24

	// Configura SPI para modo 0 - Master - fck/32 -> 576 kHz
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
     b46:	81 e5       	ldi	r24, 0x51	; 81
     b48:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8d bd       	out	0x2d, r24	; 45
     b4e:	80 e0       	ldi	r24, 0x00	; 0

	// Send 0 to max6921 3 times to clear it's shift register
	for(i = 0; i < 3; i++)
	{
		SPDR = 0;
     b50:	1e bc       	out	0x2e, r1	; 46
		while(!(SPSR & (1<<SPIF)));
     b52:	0d b4       	in	r0, 0x2d	; 45
     b54:	07 fe       	sbrs	r0, 7
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <vfd_init+0x2a>
	// Configura SPI para modo 0 - Master - fck/32 -> 576 kHz
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
	SPSR = (1<<SPI2X);

	// Send 0 to max6921 3 times to clear it's shift register
	for(i = 0; i < 3; i++)
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	83 30       	cpi	r24, 0x03	; 3
     b5c:	c9 f7       	brne	.-14     	; 0xb50 <vfd_init+0x28>
	{
		SPDR = 0;
		while(!(SPSR & (1<<SPIF)));
	}
	i = SPDR;		// Clear SPIF flag
     b5e:	8e b5       	in	r24, 0x2e	; 46

	VFD_PORT |= (1<<VFD_LOAD);
     b60:	28 9a       	sbi	0x05, 0	; 5
	VFD_PORT &= ~(1<<VFD_LOAD);
     b62:	28 98       	cbi	0x05, 0	; 5
}
     b64:	08 95       	ret

00000b66 <vfd_set>:


void vfd_set(uint8_t segs, uint16_t grids)
{
	// disable the refresh interrupts
	TIMSK1 &= ~(1<<TOIE1);
     b66:	ef e6       	ldi	r30, 0x6F	; 111
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	90 81       	ld	r25, Z
     b6c:	9e 7f       	andi	r25, 0xFE	; 254
     b6e:	90 83       	st	Z, r25
	
	// Disable blank
	SET_PWM;
     b70:	e0 e8       	ldi	r30, 0x80	; 128
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	90 81       	ld	r25, Z
     b76:	90 6c       	ori	r25, 0xC0	; 192
     b78:	90 83       	st	Z, r25

	CurChar.segs = segs;
     b7a:	28 2f       	mov	r18, r24
     b7c:	22 0f       	add	r18, r18
     b7e:	90 91 6b 01 	lds	r25, 0x016B
     b82:	91 70       	andi	r25, 0x01	; 1
     b84:	92 2b       	or	r25, r18
     b86:	90 93 6b 01 	sts	0x016B, r25
     b8a:	88 1f       	adc	r24, r24
     b8c:	88 27       	eor	r24, r24
     b8e:	88 1f       	adc	r24, r24
     b90:	90 91 6c 01 	lds	r25, 0x016C
     b94:	9e 7f       	andi	r25, 0xFE	; 254
     b96:	98 2b       	or	r25, r24
     b98:	90 93 6c 01 	sts	0x016C, r25
	CurChar.grids = grids;
     b9c:	71 70       	andi	r23, 0x01	; 1
     b9e:	60 93 6a 01 	sts	0x016A, r22
     ba2:	97 2f       	mov	r25, r23
     ba4:	91 70       	andi	r25, 0x01	; 1
     ba6:	80 91 6b 01 	lds	r24, 0x016B
     baa:	8e 7f       	andi	r24, 0xFE	; 254
     bac:	89 2b       	or	r24, r25
     bae:	80 93 6b 01 	sts	0x016B, r24

	// Start transmitting
	SPDR = CurChar.bytes[VFD_LAST_CHAR];
     bb2:	80 91 6c 01 	lds	r24, 0x016C
     bb6:	8e bd       	out	0x2e, r24	; 46
	SPCR |= (1<<SPIE);
     bb8:	8c b5       	in	r24, 0x2c	; 44
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c bd       	out	0x2c, r24	; 44
}
     bbe:	08 95       	ret

00000bc0 <vfd_setchar>:

void vfd_setchar(char data, uint16_t grids)
{
     bc0:	e8 2f       	mov	r30, r24
	switch (data)
     bc2:	8a 32       	cpi	r24, 0x2A	; 42
     bc4:	28 f0       	brcs	.+10     	; 0xbd0 <vfd_setchar+0x10>
     bc6:	80 36       	cpi	r24, 0x60	; 96
     bc8:	30 f0       	brcs	.+12     	; 0xbd6 <vfd_setchar+0x16>
     bca:	81 56       	subi	r24, 0x61	; 97
     bcc:	8a 31       	cpi	r24, 0x1A	; 26
     bce:	10 f0       	brcs	.+4      	; 0xbd4 <vfd_setchar+0x14>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <vfd_setchar+0x1e>
	{
		case 'a'...'z':
			data -= 0x20;		// It's lower case, so make upper case
     bd4:	e0 52       	subi	r30, 0x20	; 32
								// Don't break, as its now a valid char
		case '*'...'_':			// This is the whole range of valid chars
			data = pgm_read_byte(&VFD_Segs[data - '*']);
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	e8 5c       	subi	r30, 0xC8	; 200
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	84 91       	lpm	r24, Z+
			data = 0x00;
			break;
	}

	vfd_set(data, grids);
}
     bde:	c3 cf       	rjmp	.-122    	; 0xb66 <vfd_set>

00000be0 <vfd_brightness>:

void vfd_brightness(uint8_t duty)
{
	OCR1A = duty;
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	30 93 89 00 	sts	0x0089, r19
     be8:	20 93 88 00 	sts	0x0088, r18

	// with OCR = 0, there is a narrow pulse on OC1A
	// so if is 0, sets to a regular low output 
	if (0 == duty)
     bec:	88 23       	and	r24, r24
     bee:	39 f4       	brne	.+14     	; 0xbfe <vfd_brightness+0x1e>
	{
		SET_BLANK;
     bf0:	80 91 80 00 	lds	r24, 0x0080
     bf4:	8f 73       	andi	r24, 0x3F	; 63
     bf6:	80 93 80 00 	sts	0x0080, r24
     bfa:	29 9a       	sbi	0x05, 1	; 5
     bfc:	08 95       	ret
	}
	else
	{
		SET_PWM;
     bfe:	80 91 80 00 	lds	r24, 0x0080
     c02:	80 6c       	ori	r24, 0xC0	; 192
     c04:	80 93 80 00 	sts	0x0080, r24
     c08:	08 95       	ret

00000c0a <vfd_setstring>:
	}

}

void vfd_setstring(const char *str)
{
     c0a:	dc 01       	movw	r26, r24
	uint8_t curchar;
	uint8_t length = 0;

	TIMSK1 &= ~(1<<TOIE1);
     c0c:	80 91 6f 00 	lds	r24, 0x006F
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	80 93 6f 00 	sts	0x006F, r24
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	27 c0       	rjmp	.+78     	; 0xc68 <vfd_setstring+0x5e>

	while ((*str))
	{
		curchar = *(str++);

		if ((curchar == '.') && (length > 0))
     c1a:	9e 32       	cpi	r25, 0x2E	; 46
     c1c:	51 f4       	brne	.+20     	; 0xc32 <vfd_setstring+0x28>
     c1e:	22 23       	and	r18, r18
     c20:	89 f0       	breq	.+34     	; 0xc44 <vfd_setstring+0x3a>
		{
			vfd_buffer[length-1] += 1;
     c22:	e2 2f       	mov	r30, r18
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	eb 5b       	subi	r30, 0xBB	; 187
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	80 81       	ld	r24, Z
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	80 83       	st	Z, r24
     c30:	1a c0       	rjmp	.+52     	; 0xc66 <vfd_setstring+0x5c>
		}
		else
		{
			switch (curchar)
     c32:	9a 32       	cpi	r25, 0x2A	; 42
     c34:	90 f0       	brcs	.+36     	; 0xc5a <vfd_setstring+0x50>
     c36:	90 36       	cpi	r25, 0x60	; 96
     c38:	28 f0       	brcs	.+10     	; 0xc44 <vfd_setstring+0x3a>
     c3a:	89 2f       	mov	r24, r25
     c3c:	81 56       	subi	r24, 0x61	; 97
     c3e:	8a 31       	cpi	r24, 0x1A	; 26
     c40:	60 f4       	brcc	.+24     	; 0xc5a <vfd_setstring+0x50>
			{
				case 'a'...'z':
					curchar -= 0x20;	// It's lower case, so make upper case
     c42:	90 52       	subi	r25, 0x20	; 32
										// Don't break, as its now a valid char
				case '*'...'_':			// This is the whole range of valid chars
					vfd_buffer[length] = pgm_read_byte(&VFD_Segs[curchar - '*']);
     c44:	e9 2f       	mov	r30, r25
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	e8 5c       	subi	r30, 0xC8	; 200
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	84 91       	lpm	r24, Z+
     c4e:	e2 2f       	mov	r30, r18
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	ea 5b       	subi	r30, 0xBA	; 186
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	80 83       	st	Z, r24
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <vfd_setstring+0x5a>
					break;

				default:
					vfd_buffer[length] = 0x00;
     c5a:	e2 2f       	mov	r30, r18
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	ea 5b       	subi	r30, 0xBA	; 186
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	10 82       	st	Z, r1
					break;
			}
			length++;
     c64:	2f 5f       	subi	r18, 0xFF	; 255

	TIMSK1 &= ~(1<<TOIE1);

	while ((*str))
	{
		curchar = *(str++);
     c66:	11 96       	adiw	r26, 0x01	; 1
	uint8_t curchar;
	uint8_t length = 0;

	TIMSK1 &= ~(1<<TOIE1);

	while ((*str))
     c68:	9c 91       	ld	r25, X
     c6a:	99 23       	and	r25, r25
     c6c:	b1 f6       	brne	.-84     	; 0xc1a <vfd_setstring+0x10>
			}
			length++;
		}
	}

	vfd_mux_first = 0;
     c6e:	10 92 67 01 	sts	0x0167, r1
	vfd_mux_last = 7;
     c72:	87 e0       	ldi	r24, 0x07	; 7
     c74:	80 93 68 01 	sts	0x0168, r24
	vfd_next_char = 0;
     c78:	10 92 69 01 	sts	0x0169, r1
	curgrid = (1 << (VFD_GRIDS - VFD_SPECIAL_CHAR - 1));
     c7c:	80 e8       	ldi	r24, 0x80	; 128
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	90 93 1d 01 	sts	0x011D, r25
     c84:	80 93 1c 01 	sts	0x011C, r24

	if (length != 0)
     c88:	22 23       	and	r18, r18
     c8a:	61 f0       	breq	.+24     	; 0xca4 <vfd_setstring+0x9a>
	{
		vfd_buffer_length = length;
     c8c:	20 93 66 01 	sts	0x0166, r18
     c90:	82 2f       	mov	r24, r18
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <vfd_setstring+0x96>

		// fill with blanks, so it won't change brightness with shorter strings
		for(curchar = length; curchar < 8; curchar++)
		{
			vfd_buffer[curchar] = 0;
     c94:	e8 2f       	mov	r30, r24
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	ea 5b       	subi	r30, 0xBA	; 186
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	10 82       	st	Z, r1
	if (length != 0)
	{
		vfd_buffer_length = length;

		// fill with blanks, so it won't change brightness with shorter strings
		for(curchar = length; curchar < 8; curchar++)
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	88 30       	cpi	r24, 0x08	; 8
     ca2:	c0 f3       	brcs	.-16     	; 0xc94 <vfd_setstring+0x8a>
			vfd_buffer[curchar] = 0;
		}	
	}

	// Enable refresh interrupts
	TIMSK1 = (1<<TOIE1);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 6f 00 	sts	0x006F, r24
}
     caa:	08 95       	ret

00000cac <vfd_scrollspeed>:

void vfd_scrollspeed(uint8_t speed)
{
	vfd_scroll = speed;
     cac:	80 93 1b 01 	sts	0x011B, r24
}
     cb0:	08 95       	ret

00000cb2 <__vector_13>:

// Executed at 9 kHz (Brightness PWM)
ISR(TIMER1_OVF_vect)
{
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	4f 93       	push	r20
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
	static uint8_t ticks;
	static uint16_t scrl_ticks = VFD_SCROLLSPEED * VFD_SCRLTIMEBASE;

	ticks++;
     cca:	80 91 45 01 	lds	r24, 0x0145
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	80 93 45 01 	sts	0x0145, r24
	if (ticks > 8)		// The part inside the if is at 1 kHz
     cd4:	89 30       	cpi	r24, 0x09	; 9
     cd6:	08 f4       	brcc	.+2      	; 0xcda <__vector_13+0x28>
     cd8:	a7 c0       	rjmp	.+334    	; 0xe28 <__vector_13+0x176>
	{	
		ticks = 0;
     cda:	10 92 45 01 	sts	0x0145, r1

		if ((vfd_buffer_length > 8) && (vfd_scroll != 0))
     cde:	40 91 66 01 	lds	r20, 0x0166
     ce2:	49 30       	cpi	r20, 0x09	; 9
     ce4:	c0 f1       	brcs	.+112    	; 0xd56 <__vector_13+0xa4>
     ce6:	20 91 1b 01 	lds	r18, 0x011B
     cea:	22 23       	and	r18, r18
     cec:	a1 f1       	breq	.+104    	; 0xd56 <__vector_13+0xa4>
		{
			if ((scrl_ticks--) == 0)
     cee:	80 91 1e 01 	lds	r24, 0x011E
     cf2:	90 91 1f 01 	lds	r25, 0x011F
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	90 93 1f 01 	sts	0x011F, r25
     cfc:	80 93 1e 01 	sts	0x011E, r24
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	49 f5       	brne	.+82     	; 0xd56 <__vector_13+0xa4>
			{
				scrl_ticks = vfd_scroll * VFD_SCRLTIMEBASE;
     d04:	89 e1       	ldi	r24, 0x19	; 25
     d06:	28 9f       	mul	r18, r24
     d08:	c0 01       	movw	r24, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	90 93 1f 01 	sts	0x011F, r25
     d10:	80 93 1e 01 	sts	0x011E, r24

				vfd_mux_first++;
     d14:	80 91 67 01 	lds	r24, 0x0167
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	80 93 67 01 	sts	0x0167, r24
				if (vfd_mux_first > vfd_buffer_length)
     d1e:	80 91 67 01 	lds	r24, 0x0167
     d22:	99 27       	eor	r25, r25
     d24:	87 fd       	sbrc	r24, 7
     d26:	90 95       	com	r25
     d28:	24 2f       	mov	r18, r20
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	1c f4       	brge	.+6      	; 0xd38 <__vector_13+0x86>
				{
					vfd_mux_first = -(VFD_GRIDS - VFD_SPECIAL_CHAR - 1);
     d32:	89 ef       	ldi	r24, 0xF9	; 249
     d34:	80 93 67 01 	sts	0x0167, r24
				}
				vfd_next_char = vfd_mux_first;
     d38:	80 91 67 01 	lds	r24, 0x0167
     d3c:	80 93 69 01 	sts	0x0169, r24
				vfd_mux_last = vfd_mux_first + 8 - 1;
     d40:	80 91 67 01 	lds	r24, 0x0167
     d44:	89 5f       	subi	r24, 0xF9	; 249
     d46:	80 93 68 01 	sts	0x0168, r24
				curgrid = (1 << (VFD_GRIDS - VFD_SPECIAL_CHAR - 1));
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 1d 01 	sts	0x011D, r25
     d52:	80 93 1c 01 	sts	0x011C, r24
			}
		}

		if ((vfd_next_char < 0)||(vfd_next_char >= vfd_buffer_length))
     d56:	80 91 69 01 	lds	r24, 0x0169
     d5a:	87 fd       	sbrc	r24, 7
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <__vector_13+0xc0>
     d5e:	80 91 69 01 	lds	r24, 0x0169
     d62:	99 27       	eor	r25, r25
     d64:	87 fd       	sbrc	r24, 7
     d66:	90 95       	com	r25
     d68:	24 2f       	mov	r18, r20
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	82 17       	cp	r24, r18
     d6e:	93 07       	cpc	r25, r19
     d70:	4c f0       	brlt	.+18     	; 0xd84 <__vector_13+0xd2>
		{
			CurChar.segs = 0;
     d72:	80 91 6b 01 	lds	r24, 0x016B
     d76:	81 70       	andi	r24, 0x01	; 1
     d78:	80 93 6b 01 	sts	0x016B, r24
     d7c:	80 91 6c 01 	lds	r24, 0x016C
     d80:	8e 7f       	andi	r24, 0xFE	; 254
     d82:	17 c0       	rjmp	.+46     	; 0xdb2 <__vector_13+0x100>
		}
		else
		{
			CurChar.segs = vfd_buffer[vfd_next_char];
     d84:	e0 91 69 01 	lds	r30, 0x0169
     d88:	ff 27       	eor	r31, r31
     d8a:	e7 fd       	sbrc	r30, 7
     d8c:	f0 95       	com	r31
     d8e:	ea 5b       	subi	r30, 0xBA	; 186
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	90 81       	ld	r25, Z
     d94:	29 2f       	mov	r18, r25
     d96:	22 0f       	add	r18, r18
     d98:	80 91 6b 01 	lds	r24, 0x016B
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	82 2b       	or	r24, r18
     da0:	80 93 6b 01 	sts	0x016B, r24
     da4:	99 1f       	adc	r25, r25
     da6:	99 27       	eor	r25, r25
     da8:	99 1f       	adc	r25, r25
     daa:	80 91 6c 01 	lds	r24, 0x016C
     dae:	8e 7f       	andi	r24, 0xFE	; 254
     db0:	89 2b       	or	r24, r25
     db2:	80 93 6c 01 	sts	0x016C, r24
		}
		CurChar.grids = curgrid;
     db6:	80 91 1c 01 	lds	r24, 0x011C
     dba:	90 91 1d 01 	lds	r25, 0x011D
     dbe:	91 70       	andi	r25, 0x01	; 1
     dc0:	80 93 6a 01 	sts	0x016A, r24
     dc4:	91 70       	andi	r25, 0x01	; 1
     dc6:	80 91 6b 01 	lds	r24, 0x016B
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	89 2b       	or	r24, r25
     dce:	80 93 6b 01 	sts	0x016B, r24

		vfd_next_char++;
     dd2:	80 91 69 01 	lds	r24, 0x0169
     dd6:	8f 5f       	subi	r24, 0xFF	; 255
     dd8:	80 93 69 01 	sts	0x0169, r24
		curgrid = curgrid >> 1;
     ddc:	80 91 1c 01 	lds	r24, 0x011C
     de0:	90 91 1d 01 	lds	r25, 0x011D
     de4:	96 95       	lsr	r25
     de6:	87 95       	ror	r24
     de8:	90 93 1d 01 	sts	0x011D, r25
     dec:	80 93 1c 01 	sts	0x011C, r24

		if (curgrid == 0)
     df0:	80 91 1c 01 	lds	r24, 0x011C
     df4:	90 91 1d 01 	lds	r25, 0x011D
     df8:	89 2b       	or	r24, r25
     dfa:	31 f4       	brne	.+12     	; 0xe08 <__vector_13+0x156>
		{
			curgrid = (1 << (VFD_GRIDS - VFD_SPECIAL_CHAR - 1));
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	90 93 1d 01 	sts	0x011D, r25
     e04:	80 93 1c 01 	sts	0x011C, r24
		}

		if (vfd_next_char > vfd_mux_last)
     e08:	90 91 69 01 	lds	r25, 0x0169
     e0c:	80 91 68 01 	lds	r24, 0x0168
     e10:	89 17       	cp	r24, r25
     e12:	24 f4       	brge	.+8      	; 0xe1c <__vector_13+0x16a>
		{
			vfd_next_char = vfd_mux_first;
     e14:	80 91 67 01 	lds	r24, 0x0167
     e18:	80 93 69 01 	sts	0x0169, r24
		}

		// Start transmitting
		SPDR = CurChar.bytes[VFD_LAST_CHAR];
     e1c:	80 91 6c 01 	lds	r24, 0x016C
     e20:	8e bd       	out	0x2e, r24	; 46
		SPCR |= (1<<SPIE);
     e22:	8c b5       	in	r24, 0x2c	; 44
     e24:	80 68       	ori	r24, 0x80	; 128
     e26:	8c bd       	out	0x2c, r24	; 44
	}
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_17>:

// Transmits 1 character to VFD
// This ISR is executed at the end of trasmission
ISR(SPI_STC_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
	static uint8_t i = VFD_LAST_CHAR;
	static uint8_t end;

	// If last trasmitted was the last one
	if (1 == end)
     e52:	80 91 44 01 	lds	r24, 0x0144
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	41 f4       	brne	.+16     	; 0xe6a <__vector_17+0x2a>
	{
		end = 0;
     e5a:	10 92 44 01 	sts	0x0144, r1

		// Pulse Load and disable interrupts
		VFD_PORT |= (1<<VFD_LOAD);
     e5e:	28 9a       	sbi	0x05, 0	; 5
		VFD_PORT &= ~(1<<VFD_LOAD);
     e60:	28 98       	cbi	0x05, 0	; 5
		SPCR &= ~(1<<SPIE);
     e62:	8c b5       	in	r24, 0x2c	; 44
     e64:	8f 77       	andi	r24, 0x7F	; 127
     e66:	8c bd       	out	0x2c, r24	; 44
     e68:	13 c0       	rjmp	.+38     	; 0xe90 <__vector_17+0x50>
	}
	else
	{
		// Trasmit next byte
		i--;
     e6a:	80 91 1a 01 	lds	r24, 0x011A
     e6e:	81 50       	subi	r24, 0x01	; 1
     e70:	80 93 1a 01 	sts	0x011A, r24
		SPDR = CurChar.bytes[i];
     e74:	e8 2f       	mov	r30, r24
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	e6 59       	subi	r30, 0x96	; 150
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	90 81       	ld	r25, Z
     e7e:	9e bd       	out	0x2e, r25	; 46
	
		// If this is the last to be trasmitted
		if (0 == i)
     e80:	88 23       	and	r24, r24
     e82:	31 f4       	brne	.+12     	; 0xe90 <__vector_17+0x50>
		{
			i = VFD_LAST_CHAR;
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	80 93 1a 01 	sts	0x011A, r24
			end = 1;			// Set flag
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 44 01 	sts	0x0144, r24
		}
	}
}
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <exit>:
     ea2:	f8 94       	cli
     ea4:	32 c3       	rjmp	.+1636   	; 0x150a <_exit>

00000ea6 <sprintf>:
     ea6:	ae e0       	ldi	r26, 0x0E	; 14
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e8 e5       	ldi	r30, 0x58	; 88
     eac:	f7 e0       	ldi	r31, 0x07	; 7
     eae:	04 c3       	rjmp	.+1544   	; 0x14b8 <__prologue_saves__+0x1c>
     eb0:	0d 89       	ldd	r16, Y+21	; 0x15
     eb2:	1e 89       	ldd	r17, Y+22	; 0x16
     eb4:	86 e0       	ldi	r24, 0x06	; 6
     eb6:	8c 83       	std	Y+4, r24	; 0x04
     eb8:	1a 83       	std	Y+2, r17	; 0x02
     eba:	09 83       	std	Y+1, r16	; 0x01
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	9f e7       	ldi	r25, 0x7F	; 127
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	9e 01       	movw	r18, r28
     ec6:	27 5e       	subi	r18, 0xE7	; 231
     ec8:	3f 4f       	sbci	r19, 0xFF	; 255
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	6f 89       	ldd	r22, Y+23	; 0x17
     ed0:	78 8d       	ldd	r23, Y+24	; 0x18
     ed2:	a9 01       	movw	r20, r18
     ed4:	09 d0       	rcall	.+18     	; 0xee8 <vfprintf>
     ed6:	2f 81       	ldd	r18, Y+7	; 0x07
     ed8:	38 85       	ldd	r19, Y+8	; 0x08
     eda:	02 0f       	add	r16, r18
     edc:	13 1f       	adc	r17, r19
     ede:	f8 01       	movw	r30, r16
     ee0:	10 82       	st	Z, r1
     ee2:	2e 96       	adiw	r28, 0x0e	; 14
     ee4:	e4 e0       	ldi	r30, 0x04	; 4
     ee6:	04 c3       	rjmp	.+1544   	; 0x14f0 <__epilogue_restores__+0x1c>

00000ee8 <vfprintf>:
     ee8:	ab e0       	ldi	r26, 0x0B	; 11
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e9 e7       	ldi	r30, 0x79	; 121
     eee:	f7 e0       	ldi	r31, 0x07	; 7
     ef0:	d5 c2       	rjmp	.+1450   	; 0x149c <__prologue_saves__>
     ef2:	3c 01       	movw	r6, r24
     ef4:	2b 01       	movw	r4, r22
     ef6:	5a 01       	movw	r10, r20
     ef8:	fc 01       	movw	r30, r24
     efa:	17 82       	std	Z+7, r1	; 0x07
     efc:	16 82       	std	Z+6, r1	; 0x06
     efe:	83 81       	ldd	r24, Z+3	; 0x03
     f00:	81 fd       	sbrc	r24, 1
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <vfprintf+0x22>
     f04:	6f ef       	ldi	r22, 0xFF	; 255
     f06:	7f ef       	ldi	r23, 0xFF	; 255
     f08:	b9 c1       	rjmp	.+882    	; 0x127c <vfprintf+0x394>
     f0a:	9a e0       	ldi	r25, 0x0A	; 10
     f0c:	89 2e       	mov	r8, r25
     f0e:	1e 01       	movw	r2, r28
     f10:	08 94       	sec
     f12:	21 1c       	adc	r2, r1
     f14:	31 1c       	adc	r3, r1
     f16:	f3 01       	movw	r30, r6
     f18:	23 81       	ldd	r18, Z+3	; 0x03
     f1a:	f2 01       	movw	r30, r4
     f1c:	23 fd       	sbrc	r18, 3
     f1e:	85 91       	lpm	r24, Z+
     f20:	23 ff       	sbrs	r18, 3
     f22:	81 91       	ld	r24, Z+
     f24:	2f 01       	movw	r4, r30
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <vfprintf+0x44>
     f2a:	a5 c1       	rjmp	.+842    	; 0x1276 <vfprintf+0x38e>
     f2c:	85 32       	cpi	r24, 0x25	; 37
     f2e:	39 f4       	brne	.+14     	; 0xf3e <vfprintf+0x56>
     f30:	23 fd       	sbrc	r18, 3
     f32:	85 91       	lpm	r24, Z+
     f34:	23 ff       	sbrs	r18, 3
     f36:	81 91       	ld	r24, Z+
     f38:	2f 01       	movw	r4, r30
     f3a:	85 32       	cpi	r24, 0x25	; 37
     f3c:	21 f4       	brne	.+8      	; 0xf46 <vfprintf+0x5e>
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	b3 01       	movw	r22, r6
     f42:	be d1       	rcall	.+892    	; 0x12c0 <fputc>
     f44:	e8 cf       	rjmp	.-48     	; 0xf16 <vfprintf+0x2e>
     f46:	98 2f       	mov	r25, r24
     f48:	ff 24       	eor	r15, r15
     f4a:	ee 24       	eor	r14, r14
     f4c:	99 24       	eor	r9, r9
     f4e:	ff e1       	ldi	r31, 0x1F	; 31
     f50:	ff 15       	cp	r31, r15
     f52:	d0 f0       	brcs	.+52     	; 0xf88 <vfprintf+0xa0>
     f54:	9b 32       	cpi	r25, 0x2B	; 43
     f56:	69 f0       	breq	.+26     	; 0xf72 <vfprintf+0x8a>
     f58:	9c 32       	cpi	r25, 0x2C	; 44
     f5a:	28 f4       	brcc	.+10     	; 0xf66 <vfprintf+0x7e>
     f5c:	90 32       	cpi	r25, 0x20	; 32
     f5e:	59 f0       	breq	.+22     	; 0xf76 <vfprintf+0x8e>
     f60:	93 32       	cpi	r25, 0x23	; 35
     f62:	91 f4       	brne	.+36     	; 0xf88 <vfprintf+0xa0>
     f64:	0e c0       	rjmp	.+28     	; 0xf82 <vfprintf+0x9a>
     f66:	9d 32       	cpi	r25, 0x2D	; 45
     f68:	49 f0       	breq	.+18     	; 0xf7c <vfprintf+0x94>
     f6a:	90 33       	cpi	r25, 0x30	; 48
     f6c:	69 f4       	brne	.+26     	; 0xf88 <vfprintf+0xa0>
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	24 c0       	rjmp	.+72     	; 0xfba <vfprintf+0xd2>
     f72:	52 e0       	ldi	r21, 0x02	; 2
     f74:	f5 2a       	or	r15, r21
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	f8 2a       	or	r15, r24
     f7a:	28 c0       	rjmp	.+80     	; 0xfcc <vfprintf+0xe4>
     f7c:	98 e0       	ldi	r25, 0x08	; 8
     f7e:	f9 2a       	or	r15, r25
     f80:	25 c0       	rjmp	.+74     	; 0xfcc <vfprintf+0xe4>
     f82:	e0 e1       	ldi	r30, 0x10	; 16
     f84:	fe 2a       	or	r15, r30
     f86:	22 c0       	rjmp	.+68     	; 0xfcc <vfprintf+0xe4>
     f88:	f7 fc       	sbrc	r15, 7
     f8a:	29 c0       	rjmp	.+82     	; 0xfde <vfprintf+0xf6>
     f8c:	89 2f       	mov	r24, r25
     f8e:	80 53       	subi	r24, 0x30	; 48
     f90:	8a 30       	cpi	r24, 0x0A	; 10
     f92:	70 f4       	brcc	.+28     	; 0xfb0 <vfprintf+0xc8>
     f94:	f6 fe       	sbrs	r15, 6
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <vfprintf+0xba>
     f98:	98 9c       	mul	r9, r8
     f9a:	90 2c       	mov	r9, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	98 0e       	add	r9, r24
     fa0:	15 c0       	rjmp	.+42     	; 0xfcc <vfprintf+0xe4>
     fa2:	e8 9c       	mul	r14, r8
     fa4:	e0 2c       	mov	r14, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	e8 0e       	add	r14, r24
     faa:	f0 e2       	ldi	r31, 0x20	; 32
     fac:	ff 2a       	or	r15, r31
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <vfprintf+0xe4>
     fb0:	9e 32       	cpi	r25, 0x2E	; 46
     fb2:	29 f4       	brne	.+10     	; 0xfbe <vfprintf+0xd6>
     fb4:	f6 fc       	sbrc	r15, 6
     fb6:	5f c1       	rjmp	.+702    	; 0x1276 <vfprintf+0x38e>
     fb8:	40 e4       	ldi	r20, 0x40	; 64
     fba:	f4 2a       	or	r15, r20
     fbc:	07 c0       	rjmp	.+14     	; 0xfcc <vfprintf+0xe4>
     fbe:	9c 36       	cpi	r25, 0x6C	; 108
     fc0:	19 f4       	brne	.+6      	; 0xfc8 <vfprintf+0xe0>
     fc2:	50 e8       	ldi	r21, 0x80	; 128
     fc4:	f5 2a       	or	r15, r21
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <vfprintf+0xe4>
     fc8:	98 36       	cpi	r25, 0x68	; 104
     fca:	49 f4       	brne	.+18     	; 0xfde <vfprintf+0xf6>
     fcc:	f2 01       	movw	r30, r4
     fce:	23 fd       	sbrc	r18, 3
     fd0:	95 91       	lpm	r25, Z+
     fd2:	23 ff       	sbrs	r18, 3
     fd4:	91 91       	ld	r25, Z+
     fd6:	2f 01       	movw	r4, r30
     fd8:	99 23       	and	r25, r25
     fda:	09 f0       	breq	.+2      	; 0xfde <vfprintf+0xf6>
     fdc:	b8 cf       	rjmp	.-144    	; 0xf4e <vfprintf+0x66>
     fde:	89 2f       	mov	r24, r25
     fe0:	85 54       	subi	r24, 0x45	; 69
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	18 f0       	brcs	.+6      	; 0xfec <vfprintf+0x104>
     fe6:	80 52       	subi	r24, 0x20	; 32
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	38 f4       	brcc	.+14     	; 0xffa <vfprintf+0x112>
     fec:	44 e0       	ldi	r20, 0x04	; 4
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	a4 0e       	add	r10, r20
     ff2:	b5 1e       	adc	r11, r21
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	59 83       	std	Y+1, r21	; 0x01
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <vfprintf+0x130>
     ffa:	93 36       	cpi	r25, 0x63	; 99
     ffc:	31 f0       	breq	.+12     	; 0x100a <vfprintf+0x122>
     ffe:	93 37       	cpi	r25, 0x73	; 115
    1000:	79 f0       	breq	.+30     	; 0x1020 <vfprintf+0x138>
    1002:	93 35       	cpi	r25, 0x53	; 83
    1004:	09 f0       	breq	.+2      	; 0x1008 <vfprintf+0x120>
    1006:	52 c0       	rjmp	.+164    	; 0x10ac <vfprintf+0x1c4>
    1008:	1f c0       	rjmp	.+62     	; 0x1048 <vfprintf+0x160>
    100a:	f5 01       	movw	r30, r10
    100c:	80 81       	ld	r24, Z
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	42 e0       	ldi	r20, 0x02	; 2
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	a4 0e       	add	r10, r20
    1016:	b5 1e       	adc	r11, r21
    1018:	61 01       	movw	r12, r2
    101a:	01 e0       	ldi	r16, 0x01	; 1
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <vfprintf+0x15a>
    1020:	f5 01       	movw	r30, r10
    1022:	c0 80       	ld	r12, Z
    1024:	d1 80       	ldd	r13, Z+1	; 0x01
    1026:	f6 fc       	sbrc	r15, 6
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <vfprintf+0x148>
    102a:	6f ef       	ldi	r22, 0xFF	; 255
    102c:	7f ef       	ldi	r23, 0xFF	; 255
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0x14c>
    1030:	69 2d       	mov	r22, r9
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	42 e0       	ldi	r20, 0x02	; 2
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	a4 0e       	add	r10, r20
    103a:	b5 1e       	adc	r11, r21
    103c:	c6 01       	movw	r24, r12
    103e:	35 d1       	rcall	.+618    	; 0x12aa <strnlen>
    1040:	8c 01       	movw	r16, r24
    1042:	5f e7       	ldi	r21, 0x7F	; 127
    1044:	f5 22       	and	r15, r21
    1046:	13 c0       	rjmp	.+38     	; 0x106e <vfprintf+0x186>
    1048:	f5 01       	movw	r30, r10
    104a:	c0 80       	ld	r12, Z
    104c:	d1 80       	ldd	r13, Z+1	; 0x01
    104e:	f6 fc       	sbrc	r15, 6
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <vfprintf+0x170>
    1052:	6f ef       	ldi	r22, 0xFF	; 255
    1054:	7f ef       	ldi	r23, 0xFF	; 255
    1056:	02 c0       	rjmp	.+4      	; 0x105c <vfprintf+0x174>
    1058:	69 2d       	mov	r22, r9
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	42 e0       	ldi	r20, 0x02	; 2
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	a4 0e       	add	r10, r20
    1062:	b5 1e       	adc	r11, r21
    1064:	c6 01       	movw	r24, r12
    1066:	16 d1       	rcall	.+556    	; 0x1294 <strnlen_P>
    1068:	8c 01       	movw	r16, r24
    106a:	50 e8       	ldi	r21, 0x80	; 128
    106c:	f5 2a       	or	r15, r21
    106e:	f3 fe       	sbrs	r15, 3
    1070:	06 c0       	rjmp	.+12     	; 0x107e <vfprintf+0x196>
    1072:	18 c0       	rjmp	.+48     	; 0x10a4 <vfprintf+0x1bc>
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	b3 01       	movw	r22, r6
    107a:	22 d1       	rcall	.+580    	; 0x12c0 <fputc>
    107c:	ea 94       	dec	r14
    107e:	8e 2d       	mov	r24, r14
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	08 17       	cp	r16, r24
    1084:	19 07       	cpc	r17, r25
    1086:	b0 f3       	brcs	.-20     	; 0x1074 <vfprintf+0x18c>
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <vfprintf+0x1bc>
    108a:	f6 01       	movw	r30, r12
    108c:	f7 fc       	sbrc	r15, 7
    108e:	85 91       	lpm	r24, Z+
    1090:	f7 fe       	sbrs	r15, 7
    1092:	81 91       	ld	r24, Z+
    1094:	6f 01       	movw	r12, r30
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	b3 01       	movw	r22, r6
    109a:	12 d1       	rcall	.+548    	; 0x12c0 <fputc>
    109c:	e1 10       	cpse	r14, r1
    109e:	ea 94       	dec	r14
    10a0:	01 50       	subi	r16, 0x01	; 1
    10a2:	10 40       	sbci	r17, 0x00	; 0
    10a4:	01 15       	cp	r16, r1
    10a6:	11 05       	cpc	r17, r1
    10a8:	81 f7       	brne	.-32     	; 0x108a <vfprintf+0x1a2>
    10aa:	e2 c0       	rjmp	.+452    	; 0x1270 <vfprintf+0x388>
    10ac:	94 36       	cpi	r25, 0x64	; 100
    10ae:	11 f0       	breq	.+4      	; 0x10b4 <vfprintf+0x1cc>
    10b0:	99 36       	cpi	r25, 0x69	; 105
    10b2:	61 f5       	brne	.+88     	; 0x110c <vfprintf+0x224>
    10b4:	f7 fe       	sbrs	r15, 7
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <vfprintf+0x1e0>
    10b8:	f5 01       	movw	r30, r10
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	42 81       	ldd	r20, Z+2	; 0x02
    10c0:	53 81       	ldd	r21, Z+3	; 0x03
    10c2:	84 e0       	ldi	r24, 0x04	; 4
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0a c0       	rjmp	.+20     	; 0x10dc <vfprintf+0x1f4>
    10c8:	f5 01       	movw	r30, r10
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	9c 01       	movw	r18, r24
    10d0:	44 27       	eor	r20, r20
    10d2:	37 fd       	sbrc	r19, 7
    10d4:	40 95       	com	r20
    10d6:	54 2f       	mov	r21, r20
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a8 0e       	add	r10, r24
    10de:	b9 1e       	adc	r11, r25
    10e0:	9f e6       	ldi	r25, 0x6F	; 111
    10e2:	f9 22       	and	r15, r25
    10e4:	57 ff       	sbrs	r21, 7
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <vfprintf+0x212>
    10e8:	50 95       	com	r21
    10ea:	40 95       	com	r20
    10ec:	30 95       	com	r19
    10ee:	21 95       	neg	r18
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	4f 4f       	sbci	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	e0 e8       	ldi	r30, 0x80	; 128
    10f8:	fe 2a       	or	r15, r30
    10fa:	ca 01       	movw	r24, r20
    10fc:	b9 01       	movw	r22, r18
    10fe:	a1 01       	movw	r20, r2
    1100:	2a e0       	ldi	r18, 0x0A	; 10
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	09 d1       	rcall	.+530    	; 0x1318 <__ultoa_invert>
    1106:	d8 2e       	mov	r13, r24
    1108:	d2 18       	sub	r13, r2
    110a:	3f c0       	rjmp	.+126    	; 0x118a <vfprintf+0x2a2>
    110c:	95 37       	cpi	r25, 0x75	; 117
    110e:	29 f4       	brne	.+10     	; 0x111a <vfprintf+0x232>
    1110:	1f 2d       	mov	r17, r15
    1112:	1f 7e       	andi	r17, 0xEF	; 239
    1114:	2a e0       	ldi	r18, 0x0A	; 10
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	1d c0       	rjmp	.+58     	; 0x1154 <vfprintf+0x26c>
    111a:	1f 2d       	mov	r17, r15
    111c:	19 7f       	andi	r17, 0xF9	; 249
    111e:	9f 36       	cpi	r25, 0x6F	; 111
    1120:	61 f0       	breq	.+24     	; 0x113a <vfprintf+0x252>
    1122:	90 37       	cpi	r25, 0x70	; 112
    1124:	20 f4       	brcc	.+8      	; 0x112e <vfprintf+0x246>
    1126:	98 35       	cpi	r25, 0x58	; 88
    1128:	09 f0       	breq	.+2      	; 0x112c <vfprintf+0x244>
    112a:	a5 c0       	rjmp	.+330    	; 0x1276 <vfprintf+0x38e>
    112c:	0f c0       	rjmp	.+30     	; 0x114c <vfprintf+0x264>
    112e:	90 37       	cpi	r25, 0x70	; 112
    1130:	39 f0       	breq	.+14     	; 0x1140 <vfprintf+0x258>
    1132:	98 37       	cpi	r25, 0x78	; 120
    1134:	09 f0       	breq	.+2      	; 0x1138 <vfprintf+0x250>
    1136:	9f c0       	rjmp	.+318    	; 0x1276 <vfprintf+0x38e>
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <vfprintf+0x25a>
    113a:	28 e0       	ldi	r18, 0x08	; 8
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	0a c0       	rjmp	.+20     	; 0x1154 <vfprintf+0x26c>
    1140:	10 61       	ori	r17, 0x10	; 16
    1142:	14 fd       	sbrc	r17, 4
    1144:	14 60       	ori	r17, 0x04	; 4
    1146:	20 e1       	ldi	r18, 0x10	; 16
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <vfprintf+0x26c>
    114c:	14 fd       	sbrc	r17, 4
    114e:	16 60       	ori	r17, 0x06	; 6
    1150:	20 e1       	ldi	r18, 0x10	; 16
    1152:	32 e0       	ldi	r19, 0x02	; 2
    1154:	17 ff       	sbrs	r17, 7
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <vfprintf+0x280>
    1158:	f5 01       	movw	r30, r10
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	44 e0       	ldi	r20, 0x04	; 4
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <vfprintf+0x290>
    1168:	f5 01       	movw	r30, r10
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	bc 01       	movw	r22, r24
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	42 e0       	ldi	r20, 0x02	; 2
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	a4 0e       	add	r10, r20
    117a:	b5 1e       	adc	r11, r21
    117c:	a1 01       	movw	r20, r2
    117e:	cc d0       	rcall	.+408    	; 0x1318 <__ultoa_invert>
    1180:	d8 2e       	mov	r13, r24
    1182:	d2 18       	sub	r13, r2
    1184:	8f e7       	ldi	r24, 0x7F	; 127
    1186:	f8 2e       	mov	r15, r24
    1188:	f1 22       	and	r15, r17
    118a:	f6 fe       	sbrs	r15, 6
    118c:	0b c0       	rjmp	.+22     	; 0x11a4 <vfprintf+0x2bc>
    118e:	5e ef       	ldi	r21, 0xFE	; 254
    1190:	f5 22       	and	r15, r21
    1192:	d9 14       	cp	r13, r9
    1194:	38 f4       	brcc	.+14     	; 0x11a4 <vfprintf+0x2bc>
    1196:	f4 fe       	sbrs	r15, 4
    1198:	07 c0       	rjmp	.+14     	; 0x11a8 <vfprintf+0x2c0>
    119a:	f2 fc       	sbrc	r15, 2
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <vfprintf+0x2c0>
    119e:	8f ee       	ldi	r24, 0xEF	; 239
    11a0:	f8 22       	and	r15, r24
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <vfprintf+0x2c0>
    11a4:	1d 2d       	mov	r17, r13
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <vfprintf+0x2c2>
    11a8:	19 2d       	mov	r17, r9
    11aa:	f4 fe       	sbrs	r15, 4
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <vfprintf+0x2e0>
    11ae:	fe 01       	movw	r30, r28
    11b0:	ed 0d       	add	r30, r13
    11b2:	f1 1d       	adc	r31, r1
    11b4:	80 81       	ld	r24, Z
    11b6:	80 33       	cpi	r24, 0x30	; 48
    11b8:	19 f4       	brne	.+6      	; 0x11c0 <vfprintf+0x2d8>
    11ba:	99 ee       	ldi	r25, 0xE9	; 233
    11bc:	f9 22       	and	r15, r25
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <vfprintf+0x2e8>
    11c0:	1f 5f       	subi	r17, 0xFF	; 255
    11c2:	f2 fe       	sbrs	r15, 2
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <vfprintf+0x2e8>
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <vfprintf+0x2e6>
    11c8:	8f 2d       	mov	r24, r15
    11ca:	86 78       	andi	r24, 0x86	; 134
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <vfprintf+0x2e8>
    11ce:	1f 5f       	subi	r17, 0xFF	; 255
    11d0:	0f 2d       	mov	r16, r15
    11d2:	f3 fc       	sbrc	r15, 3
    11d4:	13 c0       	rjmp	.+38     	; 0x11fc <vfprintf+0x314>
    11d6:	f0 fe       	sbrs	r15, 0
    11d8:	0e c0       	rjmp	.+28     	; 0x11f6 <vfprintf+0x30e>
    11da:	1e 15       	cp	r17, r14
    11dc:	10 f0       	brcs	.+4      	; 0x11e2 <vfprintf+0x2fa>
    11de:	9d 2c       	mov	r9, r13
    11e0:	0a c0       	rjmp	.+20     	; 0x11f6 <vfprintf+0x30e>
    11e2:	9d 2c       	mov	r9, r13
    11e4:	9e 0c       	add	r9, r14
    11e6:	91 1a       	sub	r9, r17
    11e8:	1e 2d       	mov	r17, r14
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <vfprintf+0x30e>
    11ec:	80 e2       	ldi	r24, 0x20	; 32
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	b3 01       	movw	r22, r6
    11f2:	66 d0       	rcall	.+204    	; 0x12c0 <fputc>
    11f4:	1f 5f       	subi	r17, 0xFF	; 255
    11f6:	1e 15       	cp	r17, r14
    11f8:	c8 f3       	brcs	.-14     	; 0x11ec <vfprintf+0x304>
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <vfprintf+0x31c>
    11fc:	1e 15       	cp	r17, r14
    11fe:	10 f4       	brcc	.+4      	; 0x1204 <vfprintf+0x31c>
    1200:	e1 1a       	sub	r14, r17
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <vfprintf+0x31e>
    1204:	ee 24       	eor	r14, r14
    1206:	04 ff       	sbrs	r16, 4
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <vfprintf+0x33e>
    120a:	80 e3       	ldi	r24, 0x30	; 48
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	b3 01       	movw	r22, r6
    1210:	57 d0       	rcall	.+174    	; 0x12c0 <fputc>
    1212:	02 ff       	sbrs	r16, 2
    1214:	1b c0       	rjmp	.+54     	; 0x124c <vfprintf+0x364>
    1216:	01 fd       	sbrc	r16, 1
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <vfprintf+0x338>
    121a:	88 e7       	ldi	r24, 0x78	; 120
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e c0       	rjmp	.+28     	; 0x123c <vfprintf+0x354>
    1220:	88 e5       	ldi	r24, 0x58	; 88
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0b c0       	rjmp	.+22     	; 0x123c <vfprintf+0x354>
    1226:	80 2f       	mov	r24, r16
    1228:	86 78       	andi	r24, 0x86	; 134
    122a:	81 f0       	breq	.+32     	; 0x124c <vfprintf+0x364>
    122c:	01 ff       	sbrs	r16, 1
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0x34c>
    1230:	8b e2       	ldi	r24, 0x2B	; 43
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <vfprintf+0x34e>
    1234:	80 e2       	ldi	r24, 0x20	; 32
    1236:	f7 fc       	sbrc	r15, 7
    1238:	8d e2       	ldi	r24, 0x2D	; 45
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	b3 01       	movw	r22, r6
    123e:	40 d0       	rcall	.+128    	; 0x12c0 <fputc>
    1240:	05 c0       	rjmp	.+10     	; 0x124c <vfprintf+0x364>
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	b3 01       	movw	r22, r6
    1248:	3b d0       	rcall	.+118    	; 0x12c0 <fputc>
    124a:	9a 94       	dec	r9
    124c:	d9 14       	cp	r13, r9
    124e:	c8 f3       	brcs	.-14     	; 0x1242 <vfprintf+0x35a>
    1250:	da 94       	dec	r13
    1252:	f1 01       	movw	r30, r2
    1254:	ed 0d       	add	r30, r13
    1256:	f1 1d       	adc	r31, r1
    1258:	80 81       	ld	r24, Z
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	b3 01       	movw	r22, r6
    125e:	30 d0       	rcall	.+96     	; 0x12c0 <fputc>
    1260:	dd 20       	and	r13, r13
    1262:	b1 f7       	brne	.-20     	; 0x1250 <vfprintf+0x368>
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <vfprintf+0x388>
    1266:	80 e2       	ldi	r24, 0x20	; 32
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	b3 01       	movw	r22, r6
    126c:	29 d0       	rcall	.+82     	; 0x12c0 <fputc>
    126e:	ea 94       	dec	r14
    1270:	ee 20       	and	r14, r14
    1272:	c9 f7       	brne	.-14     	; 0x1266 <vfprintf+0x37e>
    1274:	50 ce       	rjmp	.-864    	; 0xf16 <vfprintf+0x2e>
    1276:	f3 01       	movw	r30, r6
    1278:	66 81       	ldd	r22, Z+6	; 0x06
    127a:	77 81       	ldd	r23, Z+7	; 0x07
    127c:	cb 01       	movw	r24, r22
    127e:	2b 96       	adiw	r28, 0x0b	; 11
    1280:	e2 e1       	ldi	r30, 0x12	; 18
    1282:	28 c1       	rjmp	.+592    	; 0x14d4 <__epilogue_restores__>

00001284 <__eerd_word_m88p>:
    1284:	a8 e1       	ldi	r26, 0x18	; 24
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	42 e0       	ldi	r20, 0x02	; 2
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	a5 c0       	rjmp	.+330    	; 0x13d8 <__eerd_blraw_m88p>

0000128e <__eewr_word_m88p>:
    128e:	b2 d0       	rcall	.+356    	; 0x13f4 <__eewr_byte_m88p>
    1290:	27 2f       	mov	r18, r23
    1292:	b1 c0       	rjmp	.+354    	; 0x13f6 <__eewr_r18_m88p>

00001294 <strnlen_P>:
    1294:	fc 01       	movw	r30, r24
    1296:	05 90       	lpm	r0, Z+
    1298:	61 50       	subi	r22, 0x01	; 1
    129a:	70 40       	sbci	r23, 0x00	; 0
    129c:	01 10       	cpse	r0, r1
    129e:	d8 f7       	brcc	.-10     	; 0x1296 <strnlen_P+0x2>
    12a0:	80 95       	com	r24
    12a2:	90 95       	com	r25
    12a4:	8e 0f       	add	r24, r30
    12a6:	9f 1f       	adc	r25, r31
    12a8:	08 95       	ret

000012aa <strnlen>:
    12aa:	fc 01       	movw	r30, r24
    12ac:	61 50       	subi	r22, 0x01	; 1
    12ae:	70 40       	sbci	r23, 0x00	; 0
    12b0:	01 90       	ld	r0, Z+
    12b2:	01 10       	cpse	r0, r1
    12b4:	d8 f7       	brcc	.-10     	; 0x12ac <strnlen+0x2>
    12b6:	80 95       	com	r24
    12b8:	90 95       	com	r25
    12ba:	8e 0f       	add	r24, r30
    12bc:	9f 1f       	adc	r25, r31
    12be:	08 95       	ret

000012c0 <fputc>:
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	8c 01       	movw	r16, r24
    12ca:	eb 01       	movw	r28, r22
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	81 ff       	sbrs	r24, 1
    12d0:	1b c0       	rjmp	.+54     	; 0x1308 <fputc+0x48>
    12d2:	82 ff       	sbrs	r24, 2
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <fputc+0x30>
    12d6:	2e 81       	ldd	r18, Y+6	; 0x06
    12d8:	3f 81       	ldd	r19, Y+7	; 0x07
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	28 17       	cp	r18, r24
    12e0:	39 07       	cpc	r19, r25
    12e2:	64 f4       	brge	.+24     	; 0x12fc <fputc+0x3c>
    12e4:	e8 81       	ld	r30, Y
    12e6:	f9 81       	ldd	r31, Y+1	; 0x01
    12e8:	01 93       	st	Z+, r16
    12ea:	f9 83       	std	Y+1, r31	; 0x01
    12ec:	e8 83       	st	Y, r30
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <fputc+0x3c>
    12f0:	e8 85       	ldd	r30, Y+8	; 0x08
    12f2:	f9 85       	ldd	r31, Y+9	; 0x09
    12f4:	80 2f       	mov	r24, r16
    12f6:	09 95       	icall
    12f8:	89 2b       	or	r24, r25
    12fa:	31 f4       	brne	.+12     	; 0x1308 <fputc+0x48>
    12fc:	8e 81       	ldd	r24, Y+6	; 0x06
    12fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	9f 83       	std	Y+7, r25	; 0x07
    1304:	8e 83       	std	Y+6, r24	; 0x06
    1306:	02 c0       	rjmp	.+4      	; 0x130c <fputc+0x4c>
    1308:	0f ef       	ldi	r16, 0xFF	; 255
    130a:	1f ef       	ldi	r17, 0xFF	; 255
    130c:	c8 01       	movw	r24, r16
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <__ultoa_invert>:
    1318:	fa 01       	movw	r30, r20
    131a:	aa 27       	eor	r26, r26
    131c:	28 30       	cpi	r18, 0x08	; 8
    131e:	51 f1       	breq	.+84     	; 0x1374 <__ultoa_invert+0x5c>
    1320:	20 31       	cpi	r18, 0x10	; 16
    1322:	81 f1       	breq	.+96     	; 0x1384 <__ultoa_invert+0x6c>
    1324:	e8 94       	clt
    1326:	6f 93       	push	r22
    1328:	6e 7f       	andi	r22, 0xFE	; 254
    132a:	6e 5f       	subi	r22, 0xFE	; 254
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	af 4f       	sbci	r26, 0xFF	; 255
    1334:	b1 e0       	ldi	r27, 0x01	; 1
    1336:	3e d0       	rcall	.+124    	; 0x13b4 <__ultoa_invert+0x9c>
    1338:	b4 e0       	ldi	r27, 0x04	; 4
    133a:	3c d0       	rcall	.+120    	; 0x13b4 <__ultoa_invert+0x9c>
    133c:	67 0f       	add	r22, r23
    133e:	78 1f       	adc	r23, r24
    1340:	89 1f       	adc	r24, r25
    1342:	9a 1f       	adc	r25, r26
    1344:	a1 1d       	adc	r26, r1
    1346:	68 0f       	add	r22, r24
    1348:	79 1f       	adc	r23, r25
    134a:	8a 1f       	adc	r24, r26
    134c:	91 1d       	adc	r25, r1
    134e:	a1 1d       	adc	r26, r1
    1350:	6a 0f       	add	r22, r26
    1352:	71 1d       	adc	r23, r1
    1354:	81 1d       	adc	r24, r1
    1356:	91 1d       	adc	r25, r1
    1358:	a1 1d       	adc	r26, r1
    135a:	20 d0       	rcall	.+64     	; 0x139c <__ultoa_invert+0x84>
    135c:	09 f4       	brne	.+2      	; 0x1360 <__ultoa_invert+0x48>
    135e:	68 94       	set
    1360:	3f 91       	pop	r19
    1362:	2a e0       	ldi	r18, 0x0A	; 10
    1364:	26 9f       	mul	r18, r22
    1366:	11 24       	eor	r1, r1
    1368:	30 19       	sub	r19, r0
    136a:	30 5d       	subi	r19, 0xD0	; 208
    136c:	31 93       	st	Z+, r19
    136e:	de f6       	brtc	.-74     	; 0x1326 <__ultoa_invert+0xe>
    1370:	cf 01       	movw	r24, r30
    1372:	08 95       	ret
    1374:	46 2f       	mov	r20, r22
    1376:	47 70       	andi	r20, 0x07	; 7
    1378:	40 5d       	subi	r20, 0xD0	; 208
    137a:	41 93       	st	Z+, r20
    137c:	b3 e0       	ldi	r27, 0x03	; 3
    137e:	0f d0       	rcall	.+30     	; 0x139e <__ultoa_invert+0x86>
    1380:	c9 f7       	brne	.-14     	; 0x1374 <__ultoa_invert+0x5c>
    1382:	f6 cf       	rjmp	.-20     	; 0x1370 <__ultoa_invert+0x58>
    1384:	46 2f       	mov	r20, r22
    1386:	4f 70       	andi	r20, 0x0F	; 15
    1388:	40 5d       	subi	r20, 0xD0	; 208
    138a:	4a 33       	cpi	r20, 0x3A	; 58
    138c:	18 f0       	brcs	.+6      	; 0x1394 <__ultoa_invert+0x7c>
    138e:	49 5d       	subi	r20, 0xD9	; 217
    1390:	31 fd       	sbrc	r19, 1
    1392:	40 52       	subi	r20, 0x20	; 32
    1394:	41 93       	st	Z+, r20
    1396:	02 d0       	rcall	.+4      	; 0x139c <__ultoa_invert+0x84>
    1398:	a9 f7       	brne	.-22     	; 0x1384 <__ultoa_invert+0x6c>
    139a:	ea cf       	rjmp	.-44     	; 0x1370 <__ultoa_invert+0x58>
    139c:	b4 e0       	ldi	r27, 0x04	; 4
    139e:	a6 95       	lsr	r26
    13a0:	97 95       	ror	r25
    13a2:	87 95       	ror	r24
    13a4:	77 95       	ror	r23
    13a6:	67 95       	ror	r22
    13a8:	ba 95       	dec	r27
    13aa:	c9 f7       	brne	.-14     	; 0x139e <__ultoa_invert+0x86>
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	61 05       	cpc	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	08 95       	ret
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	0a 2e       	mov	r0, r26
    13ba:	06 94       	lsr	r0
    13bc:	57 95       	ror	r21
    13be:	47 95       	ror	r20
    13c0:	37 95       	ror	r19
    13c2:	27 95       	ror	r18
    13c4:	ba 95       	dec	r27
    13c6:	c9 f7       	brne	.-14     	; 0x13ba <__ultoa_invert+0xa2>
    13c8:	62 0f       	add	r22, r18
    13ca:	73 1f       	adc	r23, r19
    13cc:	84 1f       	adc	r24, r20
    13ce:	95 1f       	adc	r25, r21
    13d0:	a0 1d       	adc	r26, r0
    13d2:	08 95       	ret

000013d4 <__eerd_block_m88p>:
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22

000013d8 <__eerd_blraw_m88p>:
    13d8:	fc 01       	movw	r30, r24
    13da:	f9 99       	sbic	0x1f, 1	; 31
    13dc:	fe cf       	rjmp	.-4      	; 0x13da <__eerd_blraw_m88p+0x2>
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <__eerd_blraw_m88p+0x14>
    13e0:	f2 bd       	out	0x22, r31	; 34
    13e2:	e1 bd       	out	0x21, r30	; 33
    13e4:	f8 9a       	sbi	0x1f, 0	; 31
    13e6:	31 96       	adiw	r30, 0x01	; 1
    13e8:	00 b4       	in	r0, 0x20	; 32
    13ea:	0d 92       	st	X+, r0
    13ec:	41 50       	subi	r20, 0x01	; 1
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	b8 f7       	brcc	.-18     	; 0x13e0 <__eerd_blraw_m88p+0x8>
    13f2:	08 95       	ret

000013f4 <__eewr_byte_m88p>:
    13f4:	26 2f       	mov	r18, r22

000013f6 <__eewr_r18_m88p>:
    13f6:	f9 99       	sbic	0x1f, 1	; 31
    13f8:	fe cf       	rjmp	.-4      	; 0x13f6 <__eewr_r18_m88p>
    13fa:	1f ba       	out	0x1f, r1	; 31
    13fc:	92 bd       	out	0x22, r25	; 34
    13fe:	81 bd       	out	0x21, r24	; 33
    1400:	20 bd       	out	0x20, r18	; 32
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	fa 9a       	sbi	0x1f, 2	; 31
    1408:	f9 9a       	sbi	0x1f, 1	; 31
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	08 95       	ret

00001410 <__mulsi3>:
    1410:	62 9f       	mul	r22, r18
    1412:	d0 01       	movw	r26, r0
    1414:	73 9f       	mul	r23, r19
    1416:	f0 01       	movw	r30, r0
    1418:	82 9f       	mul	r24, r18
    141a:	e0 0d       	add	r30, r0
    141c:	f1 1d       	adc	r31, r1
    141e:	64 9f       	mul	r22, r20
    1420:	e0 0d       	add	r30, r0
    1422:	f1 1d       	adc	r31, r1
    1424:	92 9f       	mul	r25, r18
    1426:	f0 0d       	add	r31, r0
    1428:	83 9f       	mul	r24, r19
    142a:	f0 0d       	add	r31, r0
    142c:	74 9f       	mul	r23, r20
    142e:	f0 0d       	add	r31, r0
    1430:	65 9f       	mul	r22, r21
    1432:	f0 0d       	add	r31, r0
    1434:	99 27       	eor	r25, r25
    1436:	72 9f       	mul	r23, r18
    1438:	b0 0d       	add	r27, r0
    143a:	e1 1d       	adc	r30, r1
    143c:	f9 1f       	adc	r31, r25
    143e:	63 9f       	mul	r22, r19
    1440:	b0 0d       	add	r27, r0
    1442:	e1 1d       	adc	r30, r1
    1444:	f9 1f       	adc	r31, r25
    1446:	bd 01       	movw	r22, r26
    1448:	cf 01       	movw	r24, r30
    144a:	11 24       	eor	r1, r1
    144c:	08 95       	ret

0000144e <__udivmodhi4>:
    144e:	aa 1b       	sub	r26, r26
    1450:	bb 1b       	sub	r27, r27
    1452:	51 e1       	ldi	r21, 0x11	; 17
    1454:	07 c0       	rjmp	.+14     	; 0x1464 <__udivmodhi4_ep>

00001456 <__udivmodhi4_loop>:
    1456:	aa 1f       	adc	r26, r26
    1458:	bb 1f       	adc	r27, r27
    145a:	a6 17       	cp	r26, r22
    145c:	b7 07       	cpc	r27, r23
    145e:	10 f0       	brcs	.+4      	; 0x1464 <__udivmodhi4_ep>
    1460:	a6 1b       	sub	r26, r22
    1462:	b7 0b       	sbc	r27, r23

00001464 <__udivmodhi4_ep>:
    1464:	88 1f       	adc	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	5a 95       	dec	r21
    146a:	a9 f7       	brne	.-22     	; 0x1456 <__udivmodhi4_loop>
    146c:	80 95       	com	r24
    146e:	90 95       	com	r25
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	08 95       	ret

00001476 <__divmodhi4>:
    1476:	97 fb       	bst	r25, 7
    1478:	09 2e       	mov	r0, r25
    147a:	07 26       	eor	r0, r23
    147c:	0a d0       	rcall	.+20     	; 0x1492 <__divmodhi4_neg1>
    147e:	77 fd       	sbrc	r23, 7
    1480:	04 d0       	rcall	.+8      	; 0x148a <__divmodhi4_neg2>
    1482:	e5 df       	rcall	.-54     	; 0x144e <__udivmodhi4>
    1484:	06 d0       	rcall	.+12     	; 0x1492 <__divmodhi4_neg1>
    1486:	00 20       	and	r0, r0
    1488:	1a f4       	brpl	.+6      	; 0x1490 <__divmodhi4_exit>

0000148a <__divmodhi4_neg2>:
    148a:	70 95       	com	r23
    148c:	61 95       	neg	r22
    148e:	7f 4f       	sbci	r23, 0xFF	; 255

00001490 <__divmodhi4_exit>:
    1490:	08 95       	ret

00001492 <__divmodhi4_neg1>:
    1492:	f6 f7       	brtc	.-4      	; 0x1490 <__divmodhi4_exit>
    1494:	90 95       	com	r25
    1496:	81 95       	neg	r24
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	08 95       	ret

0000149c <__prologue_saves__>:
    149c:	2f 92       	push	r2
    149e:	3f 92       	push	r3
    14a0:	4f 92       	push	r4
    14a2:	5f 92       	push	r5
    14a4:	6f 92       	push	r6
    14a6:	7f 92       	push	r7
    14a8:	8f 92       	push	r8
    14aa:	9f 92       	push	r9
    14ac:	af 92       	push	r10
    14ae:	bf 92       	push	r11
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	ca 1b       	sub	r28, r26
    14c6:	db 0b       	sbc	r29, r27
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	09 94       	ijmp

000014d4 <__epilogue_restores__>:
    14d4:	2a 88       	ldd	r2, Y+18	; 0x12
    14d6:	39 88       	ldd	r3, Y+17	; 0x11
    14d8:	48 88       	ldd	r4, Y+16	; 0x10
    14da:	5f 84       	ldd	r5, Y+15	; 0x0f
    14dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    14de:	7d 84       	ldd	r7, Y+13	; 0x0d
    14e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    14e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    14e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    14e6:	b9 84       	ldd	r11, Y+9	; 0x09
    14e8:	c8 84       	ldd	r12, Y+8	; 0x08
    14ea:	df 80       	ldd	r13, Y+7	; 0x07
    14ec:	ee 80       	ldd	r14, Y+6	; 0x06
    14ee:	fd 80       	ldd	r15, Y+5	; 0x05
    14f0:	0c 81       	ldd	r16, Y+4	; 0x04
    14f2:	1b 81       	ldd	r17, Y+3	; 0x03
    14f4:	aa 81       	ldd	r26, Y+2	; 0x02
    14f6:	b9 81       	ldd	r27, Y+1	; 0x01
    14f8:	ce 0f       	add	r28, r30
    14fa:	d1 1d       	adc	r29, r1
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	ed 01       	movw	r28, r26
    1508:	08 95       	ret

0000150a <_exit>:
    150a:	f8 94       	cli

0000150c <__stop_program>:
    150c:	ff cf       	rjmp	.-2      	; 0x150c <__stop_program>
